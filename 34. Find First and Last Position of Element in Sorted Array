# Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

# Your algorithm's runtime complexity must be in the order of O(log n).

# If the target is not found in the array, return [-1, -1].

# Example 1:

# Input: nums = [5,7,7,8,8,10], target = 8
# Output: [3,4]
# Example 2:

# Input: nums = [5,7,7,8,8,10], target = 6
# Output: [-1,-1]

class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        if nums == []:  return [-1, -1]
        left, right = 0, len(nums) - 1
        while left + 1 < right:
            mid = left + (right - left) // 2
            if nums[mid] == target:
                left, right = mid - 1, mid + 1
                while left >= 0 and nums[left] == target:
                    left -= 1
                while right <= len(nums) - 1 and nums[right] == target:
                    right += 1
                return [left + 1, right - 1]
            
            elif nums[mid] < target:
                left = mid
            else:
                right = mid
                
        if nums[left] == target and nums[right] == target:  return [left, right]
        elif nums[left] == target:  return [left, left]
        elif nums[right] == target: return [right, right]
        else:   return [-1, -1]
