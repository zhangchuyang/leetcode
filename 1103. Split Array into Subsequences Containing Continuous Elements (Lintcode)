# Given an integer array nums. You need to split nums into several (at least 2) subsequences, where each subsequence contains at least 3 consecutive integers.

# Return whether you can make such a split.

# Example
# Example 1:

# Input: [1,2,3,3,4,5]
# Output: True
# Explanation: You can split them into two subsequences: 
#   [1, 2, 3]
#   [3, 4, 5]
# Example 2:

# Input: [1,2,3,3,4,4,5,5]
# Output: True
# Explanation: You can split them into two subsequences: 
#   [1, 2, 3, 4, 5]
#   [3, 4, 5]
# Example 3:

# Input: [1,2,3,4,4,5]
# Output: False
# Explanation: We can't split them into several legal subsequences.
# Notice
# nums.length will be in the range of [1, 10000].
# nums has been sorted in ascending order and may contain duplicates.
# If you can make such a split, each element of nums must and can only exist in one of subsequences.
# A legitimate subsequence can only consist of consecutive elements and cannot contain duplicate elements.


class Solution:
    """
    @param nums: a list of integers
    @return: return a boolean
    """
    def isPossible(self, nums):
        # write your code here
        d = {}
        tail = {}
        
        for num in nums:
            d[num] = d[num] + 1 if num in d else 1
        for num in nums:
            if num not in d or d[num] < 1:  continue
            if num - 1 in tail and tail[num - 1] > 0:
                tail[num - 1] -= 1
                tail[num] = tail[num] + 1 if num in tail else 1
            elif num + 1 in d and d[num + 1] > 0 and num + 2 in d:
                d[num + 1] -= 1
                d[num + 2] -= 1
                tail[num + 2] = tail[num + 2] + 1 if num + 2 in tail else 1
            else:
                return False
            d[num] -= 1
        return True
