# Given an array with n integers, you need to find if there are triplets (i, j, k) which satisfies following conditions:

# 0 < i, i + 1 < j, j + 1 < k < n - 1
# Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal.
# We define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.

# If it exists, return true, otherwise return false.

# Example
# Example 1:

# Input: [1,3,2,1,3,2,1,3,2,1,3]
# Output: true
# Explanation: (2,5,8) => Four subarrays are all [1, 3].
# Example 2:

# Input: [1,2,1,2,1,2,1]
# Output: true
# Explanation: (1,3,5)


class Solution:
    """
    @param nums: a list of integer
    @return: return a boolean
    """
    def splitArray(self, nums):
        # write your code here
        n = len(nums)
        total = [0] * len(nums)
        total[0] = nums[0]
        for i in range(1, n):
            total[i] = total[i - 1] + nums[i]
        
        
        for j in range(3, n - 3):
            s = set()

            for i in range(1, j - 1):
                if total[i - 1] == total[j - 1] - total[i]:
                    s.add(total[i - 1])
            for k in range(j + 2, n - 1):
                x, y = total[k - 1] - total[j], total[n - 1] - total[k]
                if x == y and x in s:
                    return True
        return False
