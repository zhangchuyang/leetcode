# The set [1,2,3,...,n] contains a total of n! unique permutations.

# By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

# "123"
# "132"
# "213"
# "231"
# "312"
# "321"
# Given n and k, return the kth permutation sequence.

# Note:

# Given n will be between 1 and 9 inclusive.
# Given k will be between 1 and n! inclusive.
# Example 1:

# Input: n = 3, k = 3
# Output: "213"
# Example 2:

# Input: n = 4, k = 9
# Output: "2314"

import math
class Solution(object):
    def getPermutation(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: str
        
        
        divmod 得到的是 1. 商 2. 余数
        k的值要减1, 目的是在最后只有两位数的时候顺序正确
        """
        
        numbers = [i for i in range(1, n + 1)]
        res = ''
        k -= 1
        
        while n > 0:
            index, k = divmod(k, math.factorial(n - 1))
            res += str(numbers[index])
            numbers.remove(numbers[index])
            n -= 1
            
        return res
