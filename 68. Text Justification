# Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

# You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces ' ' when necessary so that each line has exactly maxWidth characters.

# Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

# For the last line of text, it should be left justified and no extra space is inserted between words.

# Note:

# A word is defined as a character sequence consisting of non-space characters only.
# Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.
# The input array words contains at least one word.
# Example 1:

# Input:
# words = ["This", "is", "an", "example", "of", "text", "justification."]
# maxWidth = 16
# Output:
# [
#    "This    is    an",
#    "example  of text",
#    "justification.  "
# ]
# Example 2:

# Input:
# words = ["What","must","be","acknowledgment","shall","be"]
# maxWidth = 16
# Output:
# [
#   "What   must   be",
#   "acknowledgment  ",
#   "shall be        "
# ]
# Explanation: Note that the last line is "shall be    " instead of "shall     be",
#              because the last line must be left-justified instead of fully-justified.
#              Note that the second line is also left-justified becase it contains only one word.
# Example 3:

# Input:
# words = ["Science","is","what","we","understand","well","enough","to","explain",
#          "to","a","computer.","Art","is","everything","else","we","do"]
# maxWidth = 20
# Output:
# [
#   "Science  is  what we",
#   "understand      well",
#   "enough to explain to",
#   "a  computer.  Art is",
#   "everything  else  we",
#   "do                  "
# ]


class Solution(object):
    def fullJustify(self, words, maxWidth):
        """
        :type words: List[str]
        :type maxWidth: int
        :rtype: List[str]
        """
        res = []
        
        count = 0
        while count < len(words):
            string = ''
            length = 0
            word_list, total_words_size = [], 0
            while count < len(words) and length + len(words[count]) <= maxWidth:        
                word_list.append(words[count])
                total_words_size += len(words[count])
                length += len(words[count]) + 1
                count += 1
                
            if len(word_list) == 1:
                string = word_list[0] + ' ' * (maxWidth - total_words_size)
                res.append(string)
                continue
            if count == len(words):
                while word_list:
                    string = string + word_list.pop(0) + ' ' if len(word_list) > 1 else string + word_list.pop(0)
                string += ' ' * (maxWidth - len(string))
                res.append(string)
                return res
            space = (maxWidth - total_words_size) // (len(word_list) - 1)
            while space *(len(word_list) - 1) < maxWidth - total_words_size:
                string += word_list.pop(0) + ' ' * (space + 1)
                total_words_size += space + 1
            while word_list:
                string = string + word_list.pop(0) + ' ' * space if len(word_list) > 1 else string + word_list.pop(0)
            res.append(string)
        return res
        
        
