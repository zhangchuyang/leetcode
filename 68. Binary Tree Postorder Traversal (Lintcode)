# Given a binary tree, return the postorder traversal of its nodes' values.

# Example
# Example 1:

# Input：{1,2,3}
# Output：[2,3,1]
# Explanation:  
#   1
#   / \
#  2   3
#  it will be serialized {1,2,3}
# Post order traversal
# Example 2:

# Input：{1,#,2,3}
# Output：[3,2,1]
# Explanation:  
# 1
#  \
#   2
#  /
# 3
# it will be serialized {1,#,2,3}
# Post order traversal
# Challenge
# Can you do it without recursion?

# Notice
# The first data is the root node, followed by the value of the left and right son nodes, and "#" indicates that there is no child node.
# The number of nodes does not exceed 20.


"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: A Tree
    @return: Postorder in ArrayList which contains node values.
    """
    def postorderTraversal(self, root):
        # write your code here

        # if not root:    return []
        # stack, postorder = [], []

        # node = root
        # while stack or node:
        #     while node:
        #         stack.append(node)
        #         node = node.left if node.left else node.right
        #     node = stack.pop()
        #     postorder.append(node.val)
            
        #     if stack and stack[-1].left == node:
        #         node = stack[-1].right
        #     else:   node = None
        
        # return postorder
        
        
        
        
        res = []
        
        self.traverse(root, res)
        return res
        
    def traverse(self, root, res):
        if not root:    return
        self.traverse(root.left, res)
        self.traverse(root.right, res)
        res.append(root.val)
