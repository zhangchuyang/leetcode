import heapq
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None


Time: O(nlogk)
Space: O(k)

class Solution(object):
    def mergeKLists(self, lists):
        """
        :type lists: List[ListNode]
        :rtype: ListNode
        """
        
        
        
        dummy = head = ListNode(0)
        heap = [(node.val, node) for node in lists if node]
            
        heapq.heapify(heap)
        
        while heap:
            val, node = heap[0]
            if not node.next:   heapq.heappop(heap)
            else:   heapq.heapreplace(heap, (node.next.val, node.next))
            head.next = node
            head = head.next
            
        return dummy.next
            
