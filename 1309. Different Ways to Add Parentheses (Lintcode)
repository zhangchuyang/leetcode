# Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.

# Example
# Example1

# Input: "2-1-1"
# Output: [0, 2]
# Explanation:
# ((2-1)-1) = 0
# (2-(1-1)) = 2
# Example2

# Input: "2*3-4*5"
# Output: [-34, -14, -10, -10, 10]
# Explanation:
# (2*(3-(4*5))) = -34
# ((2*3)-(4*5)) = -14
# ((2*(3-4))*5) = -10
# (2*((3-4)*5)) = -10
# (((2*3)-4)*5) = 10



class Solution:
    """
    @param input: a string
    @return: return List[int]
    """
    def diffWaysToCompute(self, input):
        # write your code here
        
        d = {}
        res = self.helper(input, d)
        return res
        
        
    def helper(self, input, d):
        if input in d:
            return d[input]
        
        if '+' not in input and '-' not in input and '*' not in input:
            return [int(input)]
            
        res = []
        for i in range(len(input)):
            char = input[i]
            if char in '+-*':
                temp = [a + b if char == '+' else a- b if char == '-' else a * b for a in self.helper(input[:i], d) for b in self.helper(input[i + 1:], d)]
                res += temp
                
        d[input] = res
        return res
        
