# Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

# For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

# Example:

# Given the sorted array: [-10,-3,0,5,9],

# One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

#       0
#      / \
#    -3   9
#    /   /
#  -10  5


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        
        二分法 一个个找node
        """
        
        def parts(nums, start, end):
            if start >= end:    return None
            mid = start + (end - start) // 2
            print(start, end, mid)
            node = TreeNode(nums[mid])
            node.left = parts(nums, start, mid)
            node.right = parts(nums, mid + 1, end)
        
            return node
        
        left, right = 0, len(nums)
        if not nums:    return 
        return parts(nums, left, right)
        
        
