# Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.

# Example:

# Input: n = 4, k = 2
# Output:
# [
#   [2,4],
#   [3,4],
#   [2,3],
#   [1,2],
#   [1,3],
#   [1,4],
# ]

# Same Thoughts using dfs to solve the backtracking

class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        
        res = []
        self.dfs(res, n, k, 1, [])
        return res
    
    def dfs(self, res, n, k, index, path):
        if len(path) == k:  res.append(path)
        for i in range(index, n + 1):
            self.dfs(res, n, k, i + 1, path + [i])
