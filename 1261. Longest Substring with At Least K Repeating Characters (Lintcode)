# Find the length of the longest substring T of a given string (consists of lowercase letters only) such that every character in T appears no less than k times.

# Example
# Example 1:

# Input:
# s = "aaabb", k = 3
# Output:
# 3
# Explanation:
# The longest substring is "aaa", as 'a' is repeated 3 times.
# Example 2:

# Input:
# s = "ababbc", k = 2
# Output:
# 5
# Explanation:
# The longest substring is "ababb", as 'a' is repeated 2 times and 'b' is repeated 3 times.


class Solution:
    """
    @param s: a string
    @param k: an integer
    @return: return an integer
    """
    def longestSubstring(self, s, k):
        # write your code here


        for char in set(s):
            if s.count(char) < k:
                return max(self.longestSubstring(t, k) for t in s.split(char))
                
        return len(s)
