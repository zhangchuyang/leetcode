# Given a list of numbers, return all possible permutations.

# Example
# Example 1:

# Input: [1]
# Output:
# [
#   [1]
# ]
# Example 2:

# Input: [1,2,3]
# Output:
# [
#   [1,2,3],
#   [1,3,2],
#   [2,1,3],
#   [2,3,1],
#   [3,1,2],
#   [3,2,1]
# ]
# Challenge
# Do it without recursion.

# Notice
# You can assume that there is no duplicate numbers in the list.

class Solution:
    """
    @param: nums: A list of integers.
    @return: A list of permutations.
    """
    def permute(self, nums):
        # write your code here
        
        '''
        Recursion Way:
        
        if not nums:    return [[]]
        res = []
        self.dfs(nums, res, [])
        
        return res
        
    def dfs(self, nums, res, path):
        if not nums:
            res.append(path)
        
        for i in range(len(nums)):
            num = nums[i]
            self.dfs(nums[:i] + nums[i + 1:], res, path + [num])
        
        '''

        if not nums:    return [[]]
        stack = [[num] for num in nums]
        res = []
        
        while stack:
            last = stack.pop()
            if len(last) == len(nums):
                res.append(last)
                continue
            for num in nums:
                if num not in last:
                    stack.append(last + [num])
            
        return res
