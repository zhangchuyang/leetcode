# Given a 2D array representing the coordinates on the map, there are only values 0, 1, 2 on the map. value 0 means that it can pass, value 1 means not passable, value 2 means target place. Starting from the coordinates [0,0],You can only go up, down, left and right. Find the shortest path that can reach the destination, and return the length of the path.

# Example
# Example 1

# Input:
# [
#  [0, 0, 0],
#  [0, 0, 1],
#  [0, 0, 2]
# ]
# Output: 4
# Explanation: [0,0] -> [1,0] -> [2,0] -> [2,1] -> [2,2]
# Example 2

# Input:
# [
#     [0,1],
#     [0,1],
#     [0,0],
#     [0,2]
# ]
# Output: 4
# Explanation: [0,0] -> [1,0] -> [2,0] -> [3,0] -> [3,1]


class Solution:
    """
    @param targetMap: 
    @return: nothing
    
    
    BFS
    """
    def shortestPath(self, targetMap):
        # Write your code here
        queue = collections.deque([(0, 0)])    
        visited = {(0, 0): 0}
        while queue:
            x, y = queue.popleft()
            for i, j in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
                curr_x, curr_y = x + i, y + j
                if not self.isValid(curr_x, curr_y, targetMap, visited):
                    continue
                
                queue.append((curr_x, curr_y))
                visited[(curr_x, curr_y)] = visited[(x, y)] + 1
                
                if targetMap[curr_x][curr_y] == 2:
                    return visited[(curr_x, curr_y)]

        return -1        
        
    def isValid(self, x, y, targetMap, visited):
        if not (0 <= x < len(targetMap) and 0 <= y < len(targetMap[0])):
            return False
        return targetMap[x][y] != 1 and (x, y) not in visited
