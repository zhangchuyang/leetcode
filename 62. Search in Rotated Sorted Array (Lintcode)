# Suppose a sorted array is rotated at some pivot unknown to you beforehand.

# (i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

# You are given a target value to search. If found in the array return its index, otherwise return -1.

# You may assume no duplicate exists in the array.

# Example
# Example 1:

# Input: [4, 5, 1, 2, 3] and target=1, 
# Output: 2.
# Example 2:

# Input: [4, 5, 1, 2, 3] and target=0, 
# Output: -1.
# Challenge
# O(logN) time


# Binary Search (Important)

class Solution:
    """
    @param A: an integer rotated sorted array
    @param target: an integer to be searched
    @return: an integer
    """
    def search(self, A, target):
        # write your code here
        if not A:  return -1
        left, right = 0, len(A) - 1
        while left + 1 < right:
            mid = left + (right - left) // 2
            if A[mid] == target:  return mid
            if A[left] < A[mid]:
                if A[left] <= target and A[mid] >= target:
                    right = mid
                else:   left = mid
            else:
                if A[mid] <= target and A[right] >= target:
                    left = mid
                else:   right = mid
                
        if A[left] == target:   return left
        if A[right] == target:  return right
        
        return -1
