
# Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the "right" of i.

# For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.

# Example
# Example 1:

# Input: intervals = [(1,2)]
# Output: [-1]
# Explanation: 
# There is only one interval in the collection, so it outputs -1.
# Example 2:

# Input: intervals = [(3,4),(2,3),(1,2)]
# Output: [-1, 0, 1]
# Explanation: 
# There is no satisfied "right" interval for (3,4).
# For (2,3), the interval (3,4) has minimum-"right" start point;
# For (1,2), the interval (2,3) has minimum-"right" start point.
# Notice
# You may assume the interval's end point is always bigger than its start point.


"""
Definition of Interval.
class Interval(object):
    def __init__(self, start, end):
        self.start = start
        self.end = end
"""

class Solution:
    """
    @param intervals: a list of intervals
    @return: return a list of integers
    """
    def findRightInterval(self, intervals):
        # write your code here
        if not intervals:   return []
        if len(intervals) == 1: return [-1]
        res = []
        d = {}
        
        left = [interval.start for interval in intervals]
        
        for i, interval in enumerate(intervals):
            d[interval.start] = i

        left.sort()
        
        for i, interval in enumerate(intervals):
            right = interval.end
            number = self.binary_search(left, right)
            if number != float('inf'):
                res.append(d[number])
            else:
                res.append(-1)
            
        return res
            

            
    def binary_search(self, arr, target):
        
        if arr[-1] < target:    return float('inf')
        left, right = 0, len(arr) - 1
        while left + 1 < right:
            mid = left + (right - left) // 2
            if arr[mid] == target:  return arr[mid]
            if arr[mid] < target:
                left = mid
            else:
                right = mid
                
        if arr[left] > target:  return arr[left]
        else:   return arr[right]
