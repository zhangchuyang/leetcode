# You are climbing a stair case. It takes n steps to reach to the top.

# Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

# Note: Given n will be a positive integer.

# Example 1:

# Input: 2
# Output: 2
# Explanation: There are two ways to climb to the top.
# 1. 1 step + 1 step
# 2. 2 steps
# Example 2:

# Input: 3
# Output: 3
# Explanation: There are three ways to climb to the top.
# 1. 1 step + 1 step + 1 step
# 2. 1 step + 2 steps
# 3. 2 steps + 1 step


class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
#         if n == 1:
#             return 1
#         dic = [-1 for i in xrange(n)]
#         dic[0], dic[1] = 1, 2
#         return self.helper(n-1, dic)

#     def helper(self, n, dic):
#         if dic[n] < 0:
#             dic[n] = self.helper(n-1, dic)+self.helper(n-2, dic)
#         return dic[n]
        
    
        if n == 1:  return 1
        if n == 2:  return 2
        
        dp = [0 for _ in range(n)]
        dp[0], dp[1] = 1, 2
        
        for i in range(2, n):
            if not dp[i]:   dp[i] = dp[i - 1] + dp[i - 2]
        return dp[-1]
