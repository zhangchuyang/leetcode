# Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

# Example 1:

# Input: s1 = "ab" s2 = "eidbaooo"
# Output: True
# Explanation: s2 contains one permutation of s1 ("ba").
# Example 2:

# Input:s1= "ab" s2 = "eidboaoo"
# Output: False
 

# Note:

# The input strings only contain lower case letters.
# The length of both given strings is in range [1, 10,000].


class Solution(object):
    def checkInclusion(self, s1, s2):
        """
        :type s1: str
        :type s2: str
        :rtype: bool
        """
        d1 = collections.defaultdict(int)
        d2 = collections.defaultdict(int)
        
        for x in s1:    d1[x] += 1
        for x in s2[:len(s1)]:  d2[x] += 1
            
        i, j = 0, len(s1)
        
        while j < len(s2):
            if d1 == d2:    return True
            d2[s2[i]] -= 1
            if d2[s2[i]] < 1:   d2.pop(s2[i])
            d2[s2[j]] = d2.get(s2[j], 0) + 1
            i += 1
            j += 1
        return d1 == d2
            
