
# Follow up for "Unique Paths":

# Now consider if some obstacles are added to the grids. How many unique paths would there be?

# An obstacle and empty space is marked as 1 and 0 respectively in the grid.

# Example
# Example 1:
# 	Input: [[0]]
# 	Output: 1


# Example 2:
# 	Input:  [[0,0,0],[0,1,0],[0,0,0]]
# 	Output: 2
	
# 	Explanation:
# 	Only 2 different path.
	

# Notice
# m and n will be at most 100.

class Solution:
    """
    @param obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # write your code here


        if not obstacleGrid or len(obstacleGrid) == 0 or not obstacleGrid[0] or len(obstacleGrid[0]) == 0:
            return 0
        
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        dp = [[0 for j in range(n)] for i in range(m)]
        dp[0][0] = 1
        
        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j] == 1:
                    dp[i][j] = 0
                    continue
                
                if i > 0:
                    dp[i][j] += dp[i - 1][j]
                
                if j > 0:
                    dp[i][j] += dp[i][j - 1]
        
        return dp[-1][-1]
