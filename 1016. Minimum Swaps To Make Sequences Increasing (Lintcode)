# We have two integer sequences A and B of the same non-zero length.

# We are allowed to swap elements A[i] and B[i]. Note that both elements are in the same index position in their respective sequences.

# After some number of swaps, A and B are both strictly increasing. (A sequence is strictly increasing if and only if A[0] < A[1] < A[2] < ... < A[A.length - 1].)

# Given A and B, return the minimum number of swaps to make both sequences strictly increasing. It is guaranteed that the given input always makes it possible.

# Example
# Example 1:

# Input: A = [1,3,5,4], B = [1,2,3,7]
# Output: 1
# Explanation: Swap A[3] and B[3]. Then the sequences are:
#   A = [1,3,5,7] and B = [1,2,3,4],
#   which are both strictly increasing.
# Example 2:

# Input: A = [2,4,5,7,10], B = [1,3,4,5,9]
# Output: 0
# Notice
# A, B are arrays with the same length, and that length will be in the range of [1, 1000].
# A[i], B[i] are integer values in the range of [0, 2000].

class Solution:
    """
    @param A: an array
    @param B: an array
    @return: the minimum number of swaps to make both sequences strictly increasing
    """
    def minSwap(self, A, B):
        # Write your code here
        
        if not A:   return 0
        dp = [[float('inf'), float('inf')] for _ in range(len(A))]
        
        dp[0][0] = 0
        dp[0][1] = 1
        
        for i in range(1, len(A)):
            if A[i] > A[i - 1] and B[i] > B[i - 1]:
                dp[i][0] = dp[i - 1][0]
                dp[i][1] = dp[i - 1][1] + 1
            if A[i] > B[i - 1] and B[i] > A[i - 1]:
                dp[i][0] = min(dp[i][0], dp[i - 1][1])
                dp[i][1] = min(dp[i][1], dp[i - 1][0] + 1)
                
        return min(dp[-1][0], dp[-1][1])
