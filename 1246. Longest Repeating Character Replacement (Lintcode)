# Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

# Example
# Example1

# Input:
# "ABAB"
# 2
# Output:
# 4
# Explanation:
# Replace the two 'A's with two 'B's or vice versa.
# Example2

# Input:
# "AABABBA"
# 1
# Output:
# 4
# Explanation:
# Replace the one 'A' in the middle with 'B' and form "AABBBBA".
# The substring "BBBB" has the longest repeating letters, which is 4.
# Notice
# Both the string's length and k will not exceed 10^4.




class Solution:
    """
    @param s: a string
    @param k: a integer
    @return: return a integer
    """
    def characterReplacement(self, s, k):
        import collections
        # write your code here
        if not s:   return 0
        res = 1
        d = {s[0]: 1}
        max_length = 0
        right = 1
        
        for left in range(len(s)):
            while right - left - max_length <= k and right < len(s):
                d[s[right]] = d.get(s[right], 0) + 1
                max_length = max(d.values())
                right += 1
                
                if right - left - max_length <= k:  res = max(res, right - left)
                
            d[s[left]] -= 1
        
    
    
        return res
