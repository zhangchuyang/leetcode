# Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

# (i.e., [0,0,1,2,2,5,6] might become [2,5,6,0,0,1,2]).

# You are given a target value to search. If found in the array return true, otherwise return false.

# Example 1:

# Input: nums = [2,5,6,0,0,1,2], target = 0
# Output: true
# Example 2:

# Input: nums = [2,5,6,0,0,1,2], target = 3
# Output: false
# Follow up:

# This is a follow up problem to Search in Rotated Sorted Array, where nums may contain duplicates.
# Would this affect the run-time complexity? How and why?


class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: bool
        
        The worst Case is O(n)
        """
        
        if not nums:    return False
        left, right = 0, len(nums) - 1
        
        while left < right and nums[left] == nums[right]:   
            left += 1
        
        while left + 1 < right:
            
            mid = left + (right - left) // 2
            if target == nums[mid]: return True
            elif nums[mid] >= nums[left]:
                if nums[left] <= target < nums[mid]:
                    right = mid
                else:
                    left = mid
                
            elif nums[mid] <= nums[right]:
                if nums[mid] < target <= nums[right]:
                    left = mid
                else:
                    right = mid
     
        if nums[left] == target or nums[right] == target:
            return True
        
        return False
