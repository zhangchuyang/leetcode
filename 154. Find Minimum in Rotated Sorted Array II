# Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

# (i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).

# Find the minimum element.

# The array may contain duplicates.

# Example 1:

# Input: [1,3,5]
# Output: 1
# Example 2:

# Input: [2,2,2,0,1]
# Output: 0
# Note:

# This is a follow up problem to Find Minimum in Rotated Sorted Array.
# Would allow duplicates affect the run-time complexity? How and why?

class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        
        if not nums:    return 0
        first = nums[0]
        i = 0
        while i < len(nums) and nums[i] == first:   i += 1
        if i == len(nums):  return nums[0]
        left, right = i, len(nums) - 1
        
        first = nums[left]
        while left + 1 < right:
            print(left, right)
            mid = left + (right - left) // 2
            if nums[mid] >= first:
                left = mid
            else:
                right = mid

        return min(nums[0], first, nums[left], nums[right])
