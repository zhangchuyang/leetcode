# In a 2D array grid, each value grid[i][j] represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well.

# At the end, the "skyline" when viewed from all four directions of the grid, i.e. west, east, north, and south, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.

# What is the maximum total sum that the height of the buildings can be increased?

# Example
# Example 1:

# Input: 
#   [ [3,0,8,4],
#     [2,4,5,7],
#     [9,2,6,3],
#     [0,3,1,0] ]
# Output: 35
# Explanation: 
#   The skyline viewed from north or south is: [9, 4, 8, 7]
#   The skyline viewed from west or right is: [8, 7, 9, 3]
#   The grid after increasing the height of buildings without affecting skylines is:
#   [ [8,4,8,7],
#     [7,4,7,7],
#     [9,4,8,7],
#     [3,3,3,3] ]
# Example 2:

# Input: [[0,0,0],[0,0,0],[0,0,0]]
# Output: 0
# Notice
# 1 < grid.length = grid[0].length <= 50.
# All heights grid[i][j] are in the range [0, 100].
# All buildings in grid[i][j] occupy the entire grid cell: that is, they are a 1 x 1 x grid[i][j] rectangular prism.

class Solution:
    """
    @param grid: a 2D array
    @return: the maximum total sum that the height of the buildings can be increased
    """
    def maxIncreaseKeepingSkyline(self, grid):
        # Write your code here

        if not len(grid) or not len(grid[0]):   return 0
        res = 0
        
        for i in range(len(grid)):
            max_i = max(grid[i])
            for j in range(len(grid[0])):
                max_j = max([row[j] for row in grid])
                maximum = min(max_i, max_j)
                if grid[i][j] < maximum:
                    res += maximum - grid[i][j]
        return res
