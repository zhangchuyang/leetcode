# In a deck of cards, each card has an integer written on it.

# Return true if and only if you can choose X >= 2 such that it is possible to split the entire deck into 1 or more groups of cards, where:

# Each group has exactly X cards.
# All the cards in each group have the same integer.
 

# Example 1:

# Input: [1,2,3,4,4,3,2,1]
# Output: true
# Explanation: Possible partition [1,1],[2,2],[3,3],[4,4]
# Example 2:

# Input: [1,1,1,2,2,2,3,3]
# Output: false
# Explanation: No possible partition.
# Example 3:

# Input: [1]
# Output: false
# Explanation: No possible partition.
# Example 4:

# Input: [1,1]
# Output: true
# Explanation: Possible partition [1,1]
# Example 5:

# Input: [1,1,2,2,2,2]
# Output: true
# Explanation: Possible partition [1,1],[2,2],[2,2]

class Solution(object):
    def hasGroupsSizeX(self, deck):
        """
        :type deck: List[int]
        :rtype: bool
        """
        d = collections.Counter(deck)
        
        def gcd(x, y):
            if y == 0:  return x
            return gcd(y, x % y)
        
        values = list(d.values())
        res = gcd(values[0], values[0])
        
        for i in range(1, len(values)):
            res = gcd(res, values[i])
            
        return res > 1
