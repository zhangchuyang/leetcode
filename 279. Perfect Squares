class Solution(object):
#     def numSquares(self, n):
#         """
#         :type n: int
#         :rtype: int
#         """
        
#         number = int(math.sqrt(n))
#         dp = [float('INF') for _ in range(n + 1)]
            
#         for i in range(1, number + 1):
#             dp[i ** 2] = 1

#         for i in range(2, n + 1):
#             for j in range(1, i):
#                 if dp[i] == 1:  break
#                 dp[i] = min(dp[j] + dp[i - j], dp[i])

#         return dp[-1]

# Previous works but not fast enough.

    _dp = [0]
    def numSquares(self, n):
        dp = self._dp
        while len(dp) <= n:
            dp += min(dp[-i*i] for i in range(1, int(len(dp)**0.5+1))) + 1,
        return dp[n]
