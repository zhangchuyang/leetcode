# Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word.

# Return all such possible sentences.

# Example
# Example 1:

# Input："lintcode"，["de","ding","co","code","lint"]
# Output：["lint code", "lint co de"]
# Explanation：
# insert a space is "lint code"，insert two spaces is "lint co de".
# Example 2:

# Input："a"，[]
# Output：[]
# Explanation：dict is null.

class Solution:
    """
    @param: s: A string
    @param: wordDict: A set of words.
    @return: All possible sentences.
    """
    def wordBreak(self, s, wordDict):
        # write your code here
        if not wordDict:    return []
        return self.dfs(s, wordDict, {})
        
    def dfs(self, s, wordDict, visited):
        if s in visited:
            return visited[s]
            
        if not s:   return []
        
        res = []
        for i in range(1, len(s)):
            if s[:i] not in wordDict:
                continue
            
            bank = self.dfs(s[i:], wordDict, visited)
            for word in bank:
                res.append(s[:i] + ' ' + word)
                
        if s in wordDict:
            res.append(s)
            
        visited[s] = res
        return res
