# Given a non-empty array of integers, every element appears twice except for one. Find that single one.

# Note:

# Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

# Example 1:

# Input: [2,2,1]
# Output: 1
# Example 2:

# Input: [4,1,2,1,2]
# Output: 4

class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        # Hash Table O(N) O(N)
        
        # if not nums:    return 0
        # d = collections.Counter(nums)
        # for i in d: 
        #     if d[i] == 1:   return i
            
            
        #bit O(n) O(1)
        a = 0
        for i in nums:  a ^= i
        return a
