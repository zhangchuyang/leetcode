# Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

# For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

# Example:

# Given the sorted linked list: [-10,-3,0,5,9],

# One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

#       0
#      / \
#    -3   9
#    /   /
#  -10  5

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedListToBST(self, head):
        """
        :type head: ListNode
        :rtype: TreeNode
        """
        newHead = head
        values = []
        while head:
            values.append(head.val)
            head = head.next
        
        
        def convert_list_to_bst(left, right, values):
            if left > right:    return None
            mid = left + (right - left) // 2
            node = TreeNode(values[mid])
            if left == right:
                return node
            
            node.left = convert_list_to_bst(left, mid - 1, values)
            node.right = convert_list_to_bst(mid + 1, right, values)
            return node
            
            
            
        return convert_list_to_bst(0, len(values) - 1, values)
