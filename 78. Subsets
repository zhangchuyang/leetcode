# Given a set of distinct integers, nums, return all possible subsets (the power set).

# Note: The solution set must not contain duplicate subsets.

# Example:

# Input: nums = [1,2,3]
# Output:
# [
#   [3],
#   [1],
#   [2],
#   [1,2,3],
#   [1,3],
#   [2,3],
#   [1,2],
#   []
# ]


# USE DFS METHOD


class Solution(object):
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
#         res = []
#         self.dfs(nums, res, [], 0)
#         return res
    
#     def dfs(self, nums, res, path, index):
#         res.append(path)
#         print(index)
#         for i in range(index, len(nums)):
#             self.dfs(nums, res, path + [nums[i]], i + 1)
            
        res = []
        self.dfs(nums, res, [], 0)
        return res
    
    
    def dfs(self, nums, res, path, index):
        res.append(path)
        for i in range(index, len(nums)):
            self.dfs(nums, res, path + [nums[i]], i + 1)
