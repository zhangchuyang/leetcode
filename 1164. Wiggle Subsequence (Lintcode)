# A sequence of numbers is called a wiggle sequence if the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with fewer than two elements is trivially a wiggle sequence.

# For example, [1,7,4,9,2,5] is a wiggle sequence because the differences (6,-3,5,-7,3) are alternately positive and negative. In contrast, [1,4,7,2,5] and [1,7,4,5,5] are not wiggle sequences, the first because its first two differences are positive and the second because its last difference is zero.

# Given a sequence of integers, return the length of the longest subsequence that is a wiggle sequence. A subsequence is obtained by deleting some number of elements (eventually, also zero) from the original sequence, leaving the remaining elements in their original order.

# Example
# Example 1:

# Input: [1,7,4,9,2,5]
# Output: 6
# Explanation: The entire sequence is a wiggle sequence.
# Example 2:

# Input: [1,17,5,10,13,15,10,5,16,8]
# Output: 7
# Explanation: There are several subsequences that achieve this length. One is [1,17,10,13,10,16,8].
# Challenge
# Can you do it in O(n) time?


class Solution:
    """
    @param nums: the given sequence
    @return: the length of the longest subsequence that is a wiggle sequence
    """
    def wiggleMaxLength(self, nums):
        # Write your code here

        if len(nums) < 2:   return 1
        
        diff = []
        
        for i in range(len(nums) - 1):
            diff.append(nums[i + 1] - nums[i])
            
        print(diff)
        
        
        dp = [[0, 0] for _ in range(len(diff))]
        
        if diff[0] > 0:
            dp[0] = [0, 1]
        elif diff[0] < 0:
            dp[0] = [1, 0]
        
        for i in range(1, len(diff)):
            if diff[i] == 0:
                dp[i] = dp[i - 1]
            elif diff[i] < 0:
                dp[i] = [dp[i - 1][1] + 1, dp[i - 1][1]]
            else:
                dp[i] = [dp[i - 1][0], dp[i - 1][0] + 1]
            
        return max(dp[-1]) + 1
