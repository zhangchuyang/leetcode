# Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

# Each number in candidates may only be used once in the combination.

# Note:

# All numbers (including target) will be positive integers.
# The solution set must not contain duplicate combinations.
# Example 1:

# Input: candidates = [10,1,2,7,6,1,5], target = 8,
# A solution set is:
# [
#   [1, 7],
#   [1, 2, 5],
#   [2, 6],
#   [1, 1, 6]
# ]
# Example 2:

# Input: candidates = [2,5,2,1,2], target = 5,
# A solution set is:
# [
#   [1,2,2],
#   [5]
# ]



"""
几点要注意的：（为了提高速度）
    1. 不要那sum（nums）和target做比较， 每次拿到sum【i】的时候， target减去会快很多
    2. 在for loop里做判断， 如果大于当前target， 直接continue

"""

class Solution(object):
    def combinationSum2(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        candidates.sort()
        res = [] 
        self.dfs(candidates, target, res, [], 0)
        return res
    
    def dfs(self, nums, target, res, path, index):
        if not target:
            res.append(path)
            return
        
        for i in range(index, len(nums)):
            if nums[i] > target:  return
            if i > index and nums[i] == nums[i - 1]:    continue
            self.dfs(nums, target - nums[i], res, path + [nums[i]], i + 1)
