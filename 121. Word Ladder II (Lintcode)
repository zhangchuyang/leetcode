# Given two words (start and end), and a dictionary, find all shortest transformation sequence(s) from start to end, output sequence in dictionary order.
# Transformation rule such that:

# Only one letter can be changed at a time
# Each intermediate word must exist in the dictionary
# Example
# Example 1:

# Input：start = "a"，end = "c"，dict =["a","b","c"]
# Output：[["a","c"]]
# Explanation：
# "a"->"c"
# Example 2:

# Input：start ="hit"，end = "cog"，dict =["hot","dot","dog","lot","log"]
# Output：[["hit","hot","dot","dog","cog"],["hit","hot","lot","log","cog"]]
# Explanation：
# 1."hit"->"hot"->"dot"->"dog"->"cog"
# 2."hit"->"hot"->"lot"->"log"->"cog"
# The dictionary order of the first sequence is less than that of the second.
# Notice
# All words have the same length.
# All words contain only lowercase alphabetic characters.
# At least one solution exists.


import collections
class Solution:
    """
    @param: start: a string
    @param: end: a string
    @param: dict: a set of string
    @return: a list of lists of string
    """
    def findLadders(self, start, end, d):
        # write your code here
        d.add(start)
        d.add(end)
        dist = {}
        
        self.bfs(end, dist, d)
        res = []
        print(dist)
        self.dfs(start, end, dist, d, [start], res)
        return res
        
        
    def bfs(self, start, dist, d):
        dist[start] = 0
        queue = collections.deque([start])
        while queue:
            word = queue.popleft()
            for char in self.getWords(word, d):
                if char not in dist:
                    dist[char] = dist[word] + 1
                    queue.append(char)
                
        
    def getWords(self, word, d):
        res = []
        for i in range(len(word)):
            for char in 'abcdefghijklmnopqrstuvwxyz':
                string = word[:i] + char + word[i + 1:]
                if string != word and string in d:
                    res.append(string)
        return res
        
    def dfs(self, start, end, dist, d, path, res):
        if start == end:
            res.append(path)
            return
        
        for word in self.getWords(start, d):
            if dist[word] != dist[start] - 1:   continue
            self.dfs(word, end, dist, d, path + [word], res)
