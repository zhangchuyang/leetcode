# Given an array of integers A and let n to be its length.

# Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a "rotation function" F on A as follow:

# F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].

# Calculate the maximum value of F(0), F(1), ..., F(n-1).

# Example
# Example1

# Input:
# [4, 3, 2, 6]
# Output: 26
# Explanation:
# F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
# F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
# F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
# F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

# So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
# Example2

# Input:
# [-2,0,1]
# Output: 2
# Notice
# n is guaranteed to be less than 10^5.


class Solution:
    """
    @param A: an array
    @return: the maximum value of F(0), F(1), ..., F(n-1)
    """
    def maxRotateFunction(self, A):
        # Write your code here

        s = sum(A)
        curr = sum(i*a for i, a in enumerate(A))
        maxVal = curr
        for i in range(1, len(A)):
            curr += s - len(A)*A[-i]
            maxVal = max(maxVal, curr)
        return maxVal
