# Given a binary tree, return the inorder traversal of its nodes' values.

# Example
# Example 1:

# Input：{1,2,3}
# Output：[2,1,3]
# Explanation:
#   1
#   / \
#  2   3
# it will be serialized {1,2,3}
# Inorder Traversal
# Example 2:

# Input：{1,#,2,3}
# Output：[1,3,2]
# Explanation:
# 1
#  \
#   2
#  /
# 3
# it will be serialized {1,#,2,3}
# Inorder Traversal
# Challenge
# Can you do it without recursion?


'''
 Non-Recursion Method and put the node into the stack first and when poping it out, we add it into result and set node to the right tree.
'''

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: A Tree
    @return: Inorder in ArrayList which contains node values.
    """
    def inorderTraversal(self, root):
        # write your code here
        
        if not root:    return []
        
        stack, res = [], []
        node = root
        while node or stack:
            while node:
                stack.append(node)
                node = node.left
            node = stack.pop()
            res.append(node.val)
            node = node.right
        return res
