# Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

# (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).

# You are given a target value to search. If found in the array return its index, otherwise return -1.

# You may assume no duplicate exists in the array.

# Your algorithm's runtime complexity must be in the order of O(log n).

# Example 1:

# Input: nums = [4,5,6,7,0,1,2], target = 0
# Output: 4
# Example 2:

# Input: nums = [4,5,6,7,0,1,2], target = 3
# Output: -1

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        if not nums:    return -1
        
        left, right = 0, len(nums) - 1
        first = nums[0]
        
        while left + 1 < right:
            mid = left + (right - left) // 2
            if target == nums[mid]: return mid
            
            if target > first:
                if nums[mid] > target or (nums[mid] < target and nums[mid] < first):
                    right = mid
                elif nums[mid] < target and nums[mid] > first:
                    left = mid
            elif target < first:
                if nums[mid] > target and nums[mid] < first:
                    right = mid
                elif nums[mid] < target or (nums[mid] > target and nums[mid] > first):
                    left = mid
                
            else:   return 0
                    
        if nums[left] == target:    return left
        if nums[right] == target:   return right
        else:   return -1
