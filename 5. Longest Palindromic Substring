# Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

# Example 1:

# Input: "babad"
# Output: "bab"
# Note: "aba" is also a valid answer.
# Example 2:

# Input: "cbbd"
# Output: "bb"

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        
        if not s:   return ''
        res = ''
        
        for i in range(len(s)):
            left, right = i - 1, i + 1
            while left >= 0 and right < len(s) and s[left] == s[right]:
                res = s[left : right + 1] if right + 1 - left > len(res) else res
                left -= 1
                right += 1
                    
        left, right = 0, 1
        
        while right < len(s):
            l, r = left, right
            while l >= 0 and r < len(s) and s[l] == s[r]:
                res = s[l : r + 1] if r + 1 - l > len(res) else res
                l -= 1
                r += 1
                
            right += 1
            left += 1
        return res if res else s[0]
