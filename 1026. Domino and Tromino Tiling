# We have two types of tiles: a 2x1 domino shape, and an "L" tromino shape. These shapes may be rotated.

# XX  <- domino

# XX  <- "L" tromino
# X

# Given N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.

# (In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)

# Example
# Example 1:

# Input: 3
# Output: 5
# Explanation: The five different ways are listed below, different letters indicates different tiles:
#   1. XYZ  2. XXZ  3. XYY  4. XXY  5. XYY
#      XYZ     YYZ     XZZ     XYY     XXY
# Example 2:

# Input: 1
# Output: 1
# Notice
# N will be in range [1, 1000].


class Solution:
    """
    @param N: a integer
    @return: return a integer
    """
    def numTilings(self, N):
        # write your code here
        MOD = 1000000007
        if N < 3:  return N
        
        dp = [[0,0,0] for _ in range(N + 1)]
        dp[0][0] = dp[1][0] = dp[1][1] = dp[1][2] = 1
        
        for i in range(2, N + 1):
            dp[i][0] = (dp[i - 1][0] + dp[i - 2][0] + dp[i - 2][1] + dp[i - 2][2]) % MOD
            dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % MOD
            dp[i][2] = (dp[i - 1][0] + dp[i - 1][1]) % MOD
            
            
        return dp[N][0]
