# Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

# Example
# Example 1:

# Input: num = "1432219", k = 3
# Output: "1219"
# Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
# Example 2:

# Input: num = "10200", k = 1
# Output: "200"
# Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
# Example 3:

# Input: num = "10", k = 2
# Output: "0"
# Explanation: Remove all the digits from the number and it is left with nothing which is 0.
# Notice
# The length of num is less than 10002 and will be â‰¥ k.
# The given num does not contain any leading zero.


class Solution:
    """
    @param num: a string
    @param k: an integer
    @return: return a string
    """
    def removeKdigits(self, num, k):
        # write your code here

        if len(num) < k:    return '0'
        
        if k == 0:  return num
        
        stack = []
        
        for i in range(len(num)):
            while stack and k and stack[-1] > num[i]:
                stack.pop()
                k -= 1
                
            if num[i] != '0' or stack:
                stack.append(num[i])
                
        while stack and k:
            stack.pop()
            k -= 1
                
        if not stack:   return '0'
        return ''.join(stack)
