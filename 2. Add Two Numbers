# You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

# You may assume the two numbers do not contain any leading zero, except the number 0 itself.

# Example:

# Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
# Output: 7 -> 0 -> 8
# Explanation: 342 + 465 = 807.


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1:  return l2
        if not l2:  return l1
        if not l1 and not l2:   return []
        carry = 0
        dummy = head = ListNode(0)
        
        while l1 and l2:
            total = l1.val + l2.val + carry
            carry = 1 if total >= 10 else 0
            head.next = ListNode(total % 10)
            l1, l2, head = l1.next, l2.next, head.next
            
        l = l1 if l1 else l2
        while l:
            total = l.val + carry
            carry = 1 if total >= 10 else 0
            head.next = ListNode(total % 10)
            head = head.next
            l = l.next
            
        if carry:   head.next = ListNode(carry)
        return dummy.next
        
        
