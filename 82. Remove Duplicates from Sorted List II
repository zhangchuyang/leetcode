# Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

# Example 1:

# Input: 1->2->3->3->4->4->5
# Output: 1->2->5
# Example 2:

# Input: 1->1->1->2->3
# Output: 2->3

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        
        dummy = ListNode(0)
        dummy.next = head
        
        if not head:    return None
        first = dummy
        second = dummy.next
        
        while second.next:
            
            if second.next.val == second.val:
                while second.next and second.next.val == second.val:
                    second = second.next
                    
                if second.next:
                    second = second.next
                    first.next = second
                else:
                    first.next = None
                
            if second.next and second.next.val != second.val:
                first = first.next
                second = second.next
                
        return dummy.next
        
