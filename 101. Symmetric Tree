# Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

# For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

#     1
#    / \
#   2   2
#  / \ / \
# 3  4 4  3
 

# But the following [1,2,2,null,3,null,3] is not:

#     1
#    / \
#   2   2
#    \   \
#    3    3


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        
        # def isSym(L, R):
        #     if not L and not R: return True
        #     if L and R and L.val == R.val:
        #         return isSym(L.left, R.right) and isSym(L.right, R.left)
        #     return False
        # return isSym(root, root)
        
        
        if not root:    return True
        queue = [(root.left, root.right)]
        
        while queue:
            l, r = queue.pop()
            if not l and not r: continue
            if not l or not r:  return False
            if l.val != r.val:  return False
            queue.append((l.left, r.right))
            queue.append((l.right, r.left))
        return True
