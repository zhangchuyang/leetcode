# Given some points and an origin point in two-dimensional space, find k points which are nearest to the origin.
# Return these points sorted by distance, if they are same in distance, sorted by the x-axis, and if they are same in the x-axis, sorted by y-axis.

# Example
# Example 1:

# Input: points = [[4,6],[4,7],[4,4],[2,5],[1,1]], origin = [0, 0], k = 3 
# Output: [[1,1],[2,5],[4,4]]
# Example 2:

# Input: points = [[0,0],[0,9]], origin = [3, 1], k = 1
# Output: [[0,0]]


"""
Definition for a point.
class Point:
    def __init__(self, a=0, b=0):
        self.x = a
        self.y = b
"""

import heapq
class Solution:
    """
    @param points: a list of points
    @param origin: a point
    @param k: An integer
    @return: the k closest points
    """
    def kClosest(self, points, origin, k):
        # write your code here


        heap = []
        for i, point in enumerate(points):
            dis = abs(point.x - origin.x) ** 2 + abs(point.y - origin.y) ** 2
            heapq.heappush(heap, (dis, point.x, point.y))
            
        res = []
        for i in range(k):
            distance, x, y = heapq.heappop(heap)
            res.append(Point(x, y))
            
        return res
