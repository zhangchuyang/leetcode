# Given an unsorted array of integers, find the length of longest increasing subsequence.

# Example:

# Input: [10,9,2,5,3,7,101,18]
# Output: 4 
# Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 
# Note:

# There may be more than one LIS combination, it is only necessary for you to return the length.
# Your algorithm should run in O(n2) complexity.
# Follow up: Could you improve it to O(n log n) time complexity?

class Solution(object):
    def lengthOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        
        # DP Method with O(n^2) Time complexity
#         if not nums:    return 0
#         dp = [1 for _ in range(len(nums))]
#         res = 0
#         if len(nums) == 1:  return 1
        
#         for i in range(1, len(nums)):
#             num = nums[i]
#             max_index = 0
#             for j in range(i):
#                 dp[i] = max(dp[i], dp[j] + 1) if nums[j] < num else dp[i]
#             res = max(res, dp[i])
        
#         return res


        # Binary Searh Method with O(nlogn) Time complexity


        if not nums:    return 0
        best = [nums[0]]
        for i in range(1, len(nums)):
            index = self.upperbound(best, nums[i], 0, len(best))
            if index == len(best):  best += [nums[i]]
            else:   best[index] = nums[i]
        return len(best)
    
    def upperbound(self, array, target, left, right):
        if left >= right:   return left
        mid = left + (right - left) // 2
        if array[mid] >= target:
            if mid == left or array[mid - 1] < target:  return mid
            return self.upperbound(array, target, left, mid - 1)
        return self.upperbound(array, target, mid + 1, right)
