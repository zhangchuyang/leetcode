# There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

# Example
# Example 1:

# Input：["wrt","wrf","er","ett","rftt"]
# Output："wertf"
# Explanation：
# from "wrt"and"wrf" ,we can get 't'<'f'
# from "wrt"and"er" ,we can get 'w'<'e'
# from "er"and"ett" ,we can get 'r'<'t'
# from "ett"and"rftt" ,we can get 'e'<'r'
# So return "wertf"

# Example 2:

# Input：["z","x"]
# Output："zx"
# Explanation：
# from "z" and "x"，we can get 'z' < 'x'
# So return "zx"
# Notice
# You may assume all letters are in lowercase.
# You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.
# If the order is invalid, return an empty string.
# There may be multiple valid order of letters, return the smallest in normal lexicographical order

import heapq

class Solution:
    """
    @param words: a list of words
    @return: a string which is correct order
    """
    def alienOrder(self, words):
        # Write your code here
        in_degree = {char: 0 for word in words for char in word}
        neighbors = {char: [] for word in words for char in word}
        
        for i in range(len(words) - 1):
            for j in range(min(len(words[i]), len(words[i + 1]))):
                if words[i][j] != words[i + 1][j]:
                    in_degree[words[i + 1][j]] += 1
                    neighbors[words[i][j]].append(words[i + 1][j])
                    break
        
        heap = [char for char in in_degree if in_degree[char] == 0]
        
        res = []
        heapq.heapify(heap)
        while heap:
            for i in range(len(heap)):
                word = heapq.heappop(heap)
                res.append(word)
                for child in neighbors[word]:
                    in_degree[child] -= 1
                    if in_degree[child] == 0:
                        heapq.heappush(heap, child)
        
        return ''.join(res) if len(res) == len(in_degree) else ''
