class LinkedListNode():
    def __init__(self, key=None, val=-1):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
        
class LinkedList():
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0
        
    def appendHead(self, node):
        node.next, node.prev = self.head, None
        if self.head:
            self.head.prev = node
        self.head = node
        if not self.tail:   self.tail = self.head
        self.size += 1
        
    def remove(self, node):
        if not node:    return
        prev, next_node = node.prev, node.next
        if prev:    prev.next = next_node
        if next_node:   next_node.prev = prev
        
        if self.head == node:
            self.head = next_node
        if self.tail == node:
            self.tail = prev
        
        self.size -= 1
        return node        

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.d = {}
        self.linkedList = LinkedList()
        

    def get(self, key: int) -> int:
        if key not in self.d:   return -1
        self.linkedList.remove(self.d[key])
        self.linkedList.appendHead(self.d[key])
        return self.d[key].val
                                  

    def put(self, key: int, value: int) -> None:
        if key not in self.d:
            node = LinkedListNode(key, value)
            self.linkedList.appendHead(node)
            self.d[key] = node
            
            if self.linkedList.size > self.capacity:
                remove_node = self.linkedList.remove(self.linkedList.tail)
                del self.d[remove_node.key]
                
                
        else:
            self.d[key].val = value
            self.linkedList.remove(self.d[key])
            self.linkedList.appendHead(self.d[key])
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
