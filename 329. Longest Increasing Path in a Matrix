# Given an integer matrix, find the length of the longest increasing path.

# From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

# Example 1:

# Input: nums = 
# [
#   [9,9,4],
#   [6,6,8],
#   [2,1,1]
# ] 
# Output: 4 
# Explanation: The longest increasing path is [1, 2, 6, 9].
# Example 2:

# Input: nums = 
# [
#   [3,4,5],
#   [3,2,6],
#   [2,2,1]
# ] 
# Output: 4 
# Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.


class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        
        DP + DFS
        """
        
        def dfs(nums, x, y):
            if not dp[x][y]:
                val = nums[x][y]
                dp[x][y] = 1 + max(
                    dfs(nums, x - 1, y) if x and val > nums[x - 1][y] else 0,
                    dfs(nums, x + 1, y) if x < len(nums) - 1 and val > nums[x + 1][y] else 0,
                    dfs(nums, x, y - 1) if y and val > nums[x][y - 1] else 0,
                    dfs(nums, x, y + 1) if y < len(nums[0]) - 1 and val > nums[x][y + 1] else 0
                )
            return dp[x][y]

        if not matrix:  return 0

        dp = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]
        
        return max(dfs(matrix, i, j) for i in range(len(matrix)) for j in range(len(matrix[0])))
        
        


        
