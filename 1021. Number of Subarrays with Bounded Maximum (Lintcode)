# Given an array A of positive integers, and two positive integers L and R (L <= R).

# Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least L and at most R.

# Example
# Example 1:

# Input: A = [2, 1, 4, 3], L = 2, R = 3
# Output: 3
# Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
# Example 2:

# Input: A = [7,3,6,7,1], L = 1, R = 4
# Output: 2
# Notice
# L, R and A[i] will be an integer in the range o'f [0, 10^9].
# The length of A will be in the range of [1, 50000].


class Solution:
    """
    @param A: an array
    @param L: an integer
    @param R: an integer
    @return: the number of subarrays such that the value of the maximum array element in that subarray is at least L and at most R
    """
    def numSubarrayBoundedMax(self, A, L, R):
        # Write your code here

        if not A:   return 0
        res, dp, prev = 0, 0, -1
        
        for i in range(len(A)):
            if A[i] < L:    res += dp
            elif A[i] > R:    
                dp = 0
                prev = i
            else:
                dp = i - prev
                res += dp
        return res
