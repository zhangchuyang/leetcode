We are given a list scheduleof employees, which represents the working time for each employee.
Each employee has a list of non-overlappingIntervals, and these intervals are in sorted order.
Return the list of finite intervals representing common, positive-length free time forallemployees, also in sorted order.
Example 1:
Input:
 schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]

Output:
 [[3,4]]

Explanation:

There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].
We discard any intervals that contain inf as they aren't finite.
Example 2:
Input:
 schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]

Output:
 [[5,6],[7,9]]
(Even though we are representingIntervalsin the form[x, y], the objects inside areIntervals, not lists or arrays. For example,schedule[0][0].start = 1, schedule[0][0].end = 2, andschedule[0][0][0]is not defined.)
Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.
Note:
schedule and schedule[i] are lists with lengths in range [1, 50].
0 <= schedule[i].start < schedule[i].end <= 10^8.


class Solution():
    def free_time(self, intervals):
        arr = []
        for interval in intervals:
            arr += interval

        intervals = arr
        res = []
        intervals.sort(key=lambda x: x[0])
        curr_start, curr_end = intervals[0]

        print(intervals)
        for i in range(1, len(intervals)):
            start, end = intervals[i]
            if start > curr_end:
                res.append([curr_end, start])
                curr_start, curr_end = start, end
            else:
                curr_end = max(curr_end, end)


        return res


obj = Solution()
intervals = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
print(obj.free_time(intervals))
