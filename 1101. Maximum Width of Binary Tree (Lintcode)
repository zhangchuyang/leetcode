# Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

# The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

# Example
# Example 1:

# Input: 

#           1
#          /   \
#         3     2
#       / \     \  
#       5   3     9 

# Output: 4
# Explanation: The maximum width existing in the third level with the length 4 (5,3,#,9).
# Example 2:

# Input: 

#           1
#          /  
#         3    
#       / \       
#       5   3     

# Output: 2
# Explanation: The maximum width existing in the third level with the length 2 (5,3).
# Example 3:

# Input: 

#           1
#          / \
#         3   2 
#       /        
#       5      

# Output: 2
# Explanation: The maximum width existing in the second level with the length 2 (3,2).
# Example 4:

# Input: 

#           1
#          / \
#         3   2
#       /     \  
#       5       9 
#      /         \
#     6           7
		
# Output: 8
# Explanation:The maximum width existing in the fourth level with the length 8 (6,#,#,#,#,#,#,7).
# Notice
# The answer will be in the range of 32-bit signed integer.


"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

class Solution:
    """
    @param root: the root
    @return: the maximum width of the given tree
    """
    def widthOfBinaryTree(self, root):
        # Write your code here
        
        res = 0
        if not root:    return 0
        queue = [(root, 0, 0)]
        curr = left = 0
        for node, depth, pos in queue:
            if node:
                queue.append((node.left, depth + 1, pos * 2))
                queue.append((node.right, depth + 1, pos * 2 + 1))
                if curr != depth:
                    curr = depth
                    left = pos
                
                res = max(pos - left + 1, res)
        
        return res
