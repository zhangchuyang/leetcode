# There are a total of n courses you have to take, labeled from 0 to n-1.

# Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

# Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

# Example 1:

# Input: 2, [[1,0]] 
# Output: true
# Explanation: There are a total of 2 courses to take. 
#              To take course 1 you should have finished course 0. So it is possible.
# Example 2:

# Input: 2, [[1,0],[0,1]]
# Output: false
# Explanation: There are a total of 2 courses to take. 
#              To take course 1 you should have finished course 0, and to take course 0 you should
#              also have finished course 1. So it is impossible.
# Note:

# The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
# You may assume that there are no duplicate edges in the input prerequisites.

class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        

        in_degree = {course: [] for course in range(numCourses)}
        
        res, l = 0, []
        
        for course, pre in prerequisites:   in_degree[course].append(pre)
        
        for index in range(len(in_degree)):
            if not in_degree[index]:
                l.append(index)
                                      
        while l:
            res += 1
            finished_course = l.pop()
            for index, val in in_degree.items():
                if finished_course in val:
                    val.remove(finished_course)
                    if not val: l.append(index)
                        
        return res == numCourses
