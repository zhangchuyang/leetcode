# Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

# You should preserve the original relative order of the nodes in each of the two partitions.

# Example:

# Input: head = 1->4->3->2->5->2, x = 3
# Output: 1->2->2->4->3->5


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def partition(self, head, x):
        """
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """
        dummy_small = head1 = ListNode(0)
        dummy_large = head2 = ListNode(0)
        if not head:    return None
        
        while head:
            if head.val < x:
                head1.next = head
                head1 = head
            else:
                head2.next = head
                head2 = head
            head = head.next
            
        head1.next = dummy_large.next
        head2.next = None
        return dummy_small.next
