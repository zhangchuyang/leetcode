# Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

# The distance between two adjacent cells is 1.

# Example
# Example 1:

# Input:
# [[0,0,0],
#  [0,0,0],
#  [0,0,0],
#  [0,0,0],
#  [0,0,0]]
# Output:
# [[0,0,0],
#  [0,0,0],
#  [0,0,0],
#  [0,0,0],
#  [0,0,0]]
# Example 2:

# Input:
# [[0,1,0,1,1],
#  [1,1,0,0,1],
#  [0,0,0,1,0],
#  [1,0,1,1,1],
#  [1,0,0,0,1]]
# Output:
# [[0,1,0,1,2],
#  [1,1,0,0,1],
#  [0,0,0,1,0],
#  [1,0,1,1,1],
#  [1,0,0,0,1]]
# Notice
# The number of elements of the given matrix will not exceed 10,000.
# There are at least one 0 in the given matrix.
# The cells are adjacent in only four directions: up, down, left and right.

class Solution:
    """
    @param matrix: a 0-1 matrix
    @return: return a matrix
    """
    def updateMatrix(self, matrix):
        # write your code here

        n, m = len(matrix), len(matrix[0])
        
        dp = [[float('inf') for _ in range(m)] for _ in range(n)]

        for i in range(n):
            for j in range(m):
                if not matrix[i][j]:    dp[i][j] = 0
                if i > 0:   dp[i][j] = min(dp[i][j], dp[i - 1][j] + 1)
                if j > 0:   dp[i][j] = min(dp[i][j], dp[i][j - 1] + 1)
                
        for i in range(n - 1, -1, -1):
            for j in range(m - 1, -1, -1):
                if dp[i][j] > 0:
                    if i < n - 1:   dp[i][j] = min(dp[i][j], dp[i + 1][j] + 1)
                    if j < m - 1:   dp[i][j] = min(dp[i][j], dp[i][j + 1] + 1)
        
        return dp
