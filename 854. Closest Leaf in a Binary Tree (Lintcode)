"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""

# Given a binary tree where every node has a unique value, and a target key k.

# Find the value of the nearest leaf node to target k in the tree. If there are multiple cases, you should follow these priorities:

# The leaf node is in the left subtree of the node with k;
# The leaf node is in the right subtree of the node with k;
# The leaf node is not in the subtree of the node with k.
# Example
# Example 1:

# Input: {1, 3, 2}, k = 1
# Output: 3
# Explanation:
#     1
#   / \
#   3   2
# Example 2:

# Input: {1}, k = 1
# Output: 1
# Clarification
# A node is called a leaf if it has no children.

# About binary tree representation

# Notice
# root represents a binary tree with at least 1 node and at most 1000 nodes.
# Every node has a unique node.val in range [1, 1000][1,1000].
# There exists a node in the given binary tree for which node.val == k.


# Not done by myself.


class Solution:
    """
    @param root: the root
    @param k: an integer
    @return: the value of the nearest leaf node to target k in the tree
    """
    def findClosestLeaf(self, root, k):
        # Write your code here
        parents = {}
        pValK = self.dfs(root, k, parents)
        q = [pValK]
        vis = [pValK]
        
        while len(q) != 0:
            if not q[0].left and not q[0].right:    return q[0].val
            if q[0].left and (not q[0].left in vis):
                q.append(q[0].left)
                vis.append(q[0].left)
            if q[0].right and (not q[0].right in vis):
                q.append(q[0].right)
                vis.append(q[0].right)
            if q[0] in parents and (not parents[q[0]] in vis):
                q.append(parents[q[0]])
                vis.append(parents[q[0]])
                
            q.pop(0)
        return 0
        
    def dfs(self, rt, k, parents):
        res = rt
        temp = None
        
        if rt.left:
            parents[rt.left] = rt
            tmp = self.dfs(rt.left, k, parents)
            if tmp.val == k:
                res = tmp
                
        if rt.right:
            parents[rt.right] = rt
            tmp = self.dfs(rt.right, k, parents)
            if tmp.val == k:    res = tmp
            
        return res
