# Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

# Example
# Example 1:

# Input:s1 = "ab" s2 = "eidbaooo"
# Output:true
# Explanation: s2 contains one permutation of s1 ("ba").
# Example 2:

# Input:s1= "ab" s2 = "eidboaoo"
# Output: false
# Notice
# The input strings only contain lower case letters.
# The length of both given strings is in range [1, 10,000].


class Solution:
    """
    @param s1: a string
    @param s2: a string
    @return: if s2 contains the permutation of s1
    """
    def checkInclusion(self, s1, s2):
        # write your code here

        need = collections.Counter(s1)
        missing = len(s1)
        
        for index, char in enumerate(s2):
            if char in need:
                if need[char] > 0:  missing -= 1
                need[char] -= 1
            if index >= len(s1) and s2[index - len(s1)] in need:
                need[s2[index - len(s1)]] += 1
                if need[s2[index - len(s1)]] > 0:  missing += 1
            if missing == 0:
                return True
                
        return False
