# The size of the hash table is not determinate at the very beginning. If the total size of keys is too large (e.g. size >= capacity / 10), we should double the size of the hash table and rehash every keys. Say you have a hash table looks like below:

# size=3, capacity=4

# [null, 21, 14, null]
#       ↓    ↓
#       9   null
#       ↓
#       null
# The hash function is:

# int hashcode(int key, int capacity) {
#     return key % capacity;
# }
# here we have three numbers, 9, 14 and 21, where 21 and 9 share the same position as they all have the same hashcode 1 (21 % 4 = 9 % 4 = 1). We store them in the hash table by linked list.

# rehashing this hash table, double the capacity, you will get:

# size=3, capacity=8

# index:   0    1    2    3     4    5    6   7
# hash : [null, 9, null, null, null, 21, 14, null]
# Given the original hash table, return the new hash table after rehashing .

# Example
# Example 1

# Input : [null, 21->9->null, 14->null, null]
# Output : [null, 9->null, null, null, null, 21->null, 14->null, null]
# Notice
# For negative integer in hash table, the position can be calculated as follow:

# C++/Java: if you directly calculate -4 % 3 you will get -1. You can use function: a % b = (a % b + b) % b to make it is a non negative integer.
# Python: you can directly use -1 % 3, you will get 2 automatically.

"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param hashTable: A list of The first node of linked list
    @return: A list of The first node of linked list which have twice size
    """
    def rehashing(self, hashTable):
        # write your code here
        if not hashTable:   return []
        size = len(hashTable) * 2
        res = [None] * size
        
        for head in hashTable:
            while head:
                pos = head.val % size
                node = ListNode(head.val, res[pos])
                res[pos] = node
                dummy, tail = node.next, node.next
                while tail and tail.next:
                    tail = tail.next
                if dummy:
                    tail.next, node.next = node, None
                    res[pos] = dummy
                head = head.next
        return res
