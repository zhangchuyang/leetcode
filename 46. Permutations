# Given a collection of distinct integers, return all possible permutations.

# Example:

# Input: [1,2,3]
# Output:
# [
#   [1,2,3],
#   [1,3,2],
#   [2,1,3],
#   [2,3,1],
#   [3,1,2],
#   [3,2,1]
# ]

class Solution(object):
    def permute(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        
        res = []
        self.dfs(nums, res, [])
        return res
    
    def dfs(self, nums, res, path):
        print(path)
        if len(path) == len(nums):  
            res.append(path)
            return
        for i in range(len(nums)):
            if nums[i] in path: continue
            self.dfs(nums, res, path + [nums[i]])
