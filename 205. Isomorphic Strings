# Given two strings s and t, determine if they are isomorphic.

# Two strings are isomorphic if the characters in s can be replaced to get t.

# All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character but a character may map to itself.

# Example 1:

# Input: s = "egg", t = "add"
# Output: true
# Example 2:

# Input: s = "foo", t = "bar"
# Output: false
# Example 3:

# Input: s = "paper", t = "title"
# Output: true
# Note:
# You may assume both s and t have the same length.

class Solution(object):
    def isIsomorphic(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        
        s_index, t_index = [0], [0]
        for i in range(1, len(s)):
            if s[i] not in s[::i]:
                s_index.append(i)
            else:
                s_index.append(s.find(s[i]))
        
        for i in range(1, len(t)):
            if t[i] not in t[::i]:
                t_index.append(i)
            else:
                t_index.append(t.find(t[i]))
                
        return s_index == t_index
