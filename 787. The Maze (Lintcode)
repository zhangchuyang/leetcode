# There is a ball in a maze with empty spaces and walls. The ball can go through empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

# Given the ball's start position, the destination and the maze, determine whether the ball could stop at the destination.

# The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The start and destination coordinates are represented by row and column indexes.

# Example
# Example 1:

# Input:
# map = 
# [
#  [0,0,1,0,0],
#  [0,0,0,0,0],
#  [0,0,0,1,0],
#  [1,1,0,1,1],
#  [0,0,0,0,0]
# ]
# start = [0,4]
# end = [3,2]
# Output:
# false
# Example 2:

# Input:
# map = 
# [[0,0,1,0,0],
#  [0,0,0,0,0],
#  [0,0,0,1,0],
#  [1,1,0,1,1],
#  [0,0,0,0,0]
# ]
# start = [0,4]
# end = [4,4]
# Output:
# true
# Notice
# 1.There is only one ball and one destination in the maze.
# 2.Both the ball and the destination exist on an empty space, and they will not be at the same position initially.
# 3.The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls.
# 5.The maze contains at least 2 empty spaces, and both the width and height of the maze won't exceed 100.


class Solution:
    """
    @param maze: the maze
    @param start: the start
    @param destination: the destination
    @return: whether the ball could stop at the destination
    """
    def hasPath(self, maze, start, destination):
        # write your code here
        if not maze:    return False
        visited = set()
        visited.add((start[0], start[1]))
        self.res = False
        self.dfs(maze, start, destination, visited)
        return self.res
        
    def dfs(self, maze, start, destination, visited):
        if start == destination:
            self.res = True
            return
        
        for (i, j) in [(0, 1), (1, 0), (0, -1), (-1, 0)]:
            final_x, final_y = self.is_valid_or_hit(maze, start[0], start[1], i, j)
            if (final_x, final_y) not in visited:
                visited.add((final_x, final_y))
                self.dfs(maze, [final_x, final_y], destination, visited)
        
    def is_valid_or_hit(self, maze, x, y, i, j):
        while 0 <= x + i < len(maze) and 0 <= y + j < len(maze[0]):
            if maze[x + i][y + j] == 1: break
            x += i
            y += j
        return x, y
