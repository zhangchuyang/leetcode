# Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

# Example:
# Given a / b = 2.0, b / c = 3.0.
# queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? .
# return [6.0, 0.5, -1.0, 1.0, -1.0 ].

# The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

# According to the example above:

# equations = [ ["a", "b"], ["b", "c"] ],
# values = [2.0, 3.0],
# queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
 

class Solution(object):
    def calcEquation(self, equations, values, queries):
        """
        :type equations: List[List[str]]
        :type values: List[float]
        :type queries: List[List[str]]
        :rtype: List[float]
        """
        
        # BFS
        '''
        def bfs(x, y):
            if x not in g or y not in g:    return -1.0
            q, visited = [(x, 1.0)], set()
            
            while q:
                node = q.pop(0)
                if node[0] == y:    return node[1]
                visited.add(node[0])
                for vertex, weight in g[node[0]]:
                    if vertex in visited:  continue
                    q.append((vertex, weight * node[1]))
            return -1
        
        g = collections.defaultdict(list)
        for (x, y), val in zip(equations, values):
            g[x] += [(y, val)]
            g[y] += [(x, 1 / val)]
                        
        return [bfs(query[0], query[1]) for query in queries]    

        '''
        
        
