# There are N network nodes, labelled 1 to N.

# Given times, a list of travel times as directed edges times[i] = (u, v, w), where u is the source node, v is the target node, and w is the time it takes for a signal to travel from source to target.

# Now, we send a signal from a certain node K. How long will it take for all nodes to receive the signal? If it is impossible, return -1.

# Example
# Example 1:
# 	Input:  times = [[2,1,1],[2,3,1],[3,4,1]], N = 4, K = 2
# 	Output:  2
	
# Example 2:
# 	Input: times = [[1,2,1],[1,2,2]], N = 2, K = 1
# 	Output:  1
	
# 	Explanation:
# 	Choose the shortest one.


class Solution:
    """
    @param times: a 2D array
    @param N: an integer
    @param K: an integer
    @return: how long will it take for all nodes to receive the signal
    """
    def networkDelayTime(self, times, N, K):
        # Write your code here

        graph = [[float('inf') for _ in range(N + 1)] for _ in range(N + 1)]
        
        for i in range(1, N + 1):   graph[i][i] = 0
        for i in range(0, len(times)):
            graph[times[i][0]][times[i][1]] = times[i][2]
            
        distance = graph[K][:]
        visited = [0] * (N + 1)
        
        for i in range(0, N - 1):
            min_distance = float('inf')
            p = K
            for j in range(1, N + 1):
                if visited[j] == 0 and distance[j] < min_distance:
                    min_distance = distance[j]
                    p = j
            visited[p] = 1
            for j in range(1, N + 1):
                if visited[j] == 0 and distance[j] > distance[p] + graph[p][j]:
                    distance[j] = distance[p] + graph[p][j]
                    
        res = 0
        for i in range(1, N +1):
            res = max(res, distance[i])
        if res == float('inf'): return -1
        return res
