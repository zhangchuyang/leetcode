# By now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature "DI" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the "DI" secret signature.

# On the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.

# Example
# Example 1:
# 	Input:  str = "DI"
# 	Output:  [2,1,3]

# Example 2:
# 	Input: str = "I"
# 	Output:  [1,2]
	
# Notice
# The input string will only contain the character 'D' and 'I'.
# The length of input string is a positive integer and will not exceed 10,000.



# Start With 1,2 ...n and reversed the element when it doesnt match with the correct order.


class Solution:
    """
    @param s: a string
    @return: return a list of integers
    """
    def findPermutation(self, s):
        # write your code here
        nums = [i for i in range(1, len(s) + 2)]
        
        for i in range(len(s)):
            if (s[i] == 'D' and nums[i] > nums[i + 1]) or (s[i] == 'I' and nums[i] < nums[i + 1]):  continue
            else:
                j = i
                while j >= 0:
                    if (s[j] == 'D' and nums[j] < nums[j + 1]) or (s[j] == 'I' and nums[j] > nums[j + 1]):
                        nums[j], nums[j + 1] = nums[j + 1], nums[j]
                        j -= 1
                    else:   break
        return nums
