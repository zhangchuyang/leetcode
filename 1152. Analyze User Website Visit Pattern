# We are given some website visits: the user with name username[i] visited the website website[i] at time timestamp[i].

# A 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits.  (The websites in a 3-sequence are not necessarily distinct.)

# Find the 3-sequence visited by the largest number of users. If there is more than one solution, return the lexicographically smallest such 3-sequence.

 

# Example 1:

# Input: username = ["joe","joe","joe","james","james","james","james","mary","mary","mary"], timestamp = [1,2,3,4,5,6,7,8,9,10], website = ["home","about","career","home","cart","maps","home","home","about","career"]
# Output: ["home","about","career"]
# Explanation: 
# The tuples in this example are:
# ["joe", 1, "home"]
# ["joe", 2, "about"]
# ["joe", 3, "career"]
# ["james", 4, "home"]
# ["james", 5, "cart"]
# ["james", 6, "maps"]
# ["james", 7, "home"]
# ["mary", 8, "home"]
# ["mary", 9, "about"]
# ["mary", 10, "career"]
# The 3-sequence ("home", "about", "career") was visited at least once by 2 users.
# The 3-sequence ("home", "cart", "maps") was visited at least once by 1 user.
# The 3-sequence ("home", "cart", "home") was visited at least once by 1 user.
# The 3-sequence ("home", "maps", "home") was visited at least once by 1 user.
# The 3-sequence ("cart", "maps", "home") was visited at least once by 1 user.
 

# Note:

# 3 <= N = username.length = timestamp.length = website.length <= 50
# 1 <= username[i].length <= 10
# 0 <= timestamp[i] <= 10^9
# 1 <= website[i].length <= 10
# Both username[i] and website[i] contain only lowercase characters.
# It is guaranteed that there is at least one user who visited at least 3 websites.
# No user visits two websites at the same time.


import itertools
import collections
class Solution(object):
    def mostVisitedPattern(self, username, timestamp, website):
        """
        :type username: List[str]
        :type timestamp: List[int]
        :type website: List[str]
        :rtype: List[str]
        """
        query, l = [], []
        d = {}
        for time, user, web in zip(timestamp, username, website):
            query.append((time, user, web))
            
        query.sort(key=lambda x: x[0])
        
        for _, user, web in query:
            if user in d:   d[user].append(web)
            else:   d[user] = [web]

        for user, arr in d.items():
            l += list(set(itertools.combinations(arr, 3)))
        counter = collections.Counter(l)
        res = counter.most_common()
        res.sort(key=lambda x: (-x[1], x[0][0], x[0][1], x[0][2]))
        return res[0][0]
