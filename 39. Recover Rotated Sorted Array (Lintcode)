# Given a rotated sorted array, recover it to sorted array in-place.

# Example
# Example1:
# [4, 5, 1, 2, 3] -> [1, 2, 3, 4, 5]
# Example2:
# [6,8,9,1,2] -> [1,2,6,8,9]

# Challenge
# In-place, O(1) extra space and O(n) time.

# Clarification
# What is rotated array?

# For example, the orginal array is [1,2,3,4], The rotated array of it can be [1,2,3,4], [2,3,4,1], [3,4,1,2], [4,1,2,3]



# Use binary search to find the minimum number ( O(logn) Time ) and rotate the array three times.


class Solution:
    """
    @param nums: An integer array
    @return: nothing
    """
    def recoverRotatedSortedArray(self, nums):
        # write your code here
        minIndex = self.findMin(nums)
        if minIndex == 0:   return
    
        start, end = 0, len(nums) - 1
        self.rotate(nums, start, minIndex - 1)
        self.rotate(nums, minIndex, end)
        self.rotate(nums, start, end)
        
    
        
    def findMin(self, nums):
        if not nums or len(nums) < 2:   return 0
        
        left, right = 0, len(nums) - 1
        
        while left + 1 < right:
            mid = left + (right - left) // 2
            if nums[mid] > nums[right]:
                left = mid + 1
            elif nums[mid] < nums[right]:
                right = mid
            else:
                right -= 1
        
        if nums[left] < nums[right]:    return left
        return right
        
    def rotate(self, nums, left, right):
        while left <= right:
            nums[left], nums[right] = nums[right], nums[left]
            
            left += 1
            right -= 1
