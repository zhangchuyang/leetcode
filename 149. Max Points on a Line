# Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.

# Example 1:

# Input: [[1,1],[2,2],[3,3]]
# Output: 3
# Explanation:
# ^
# |
# |        o
# |     o
# |  o  
# +------------->
# 0  1  2  3  4
# Example 2:

# Input: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
# Output: 4
# Explanation:
# ^
# |
# |  o
# |     o        o
# |        o
# |  o        o
# +------------------->
# 0  1  2  3  4  5  6
# NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.


O(n^2)
O(n)

import numpy
class Solution:
    def maxPoints(self, points: List[List[int]]) -> int:
        if not points:  return 0
        
        res = 1
        
        for i in range(len(points) - 1):
            lines = {'0': 1}
            same = 0
            for j in range(i + 1, len(points)):
                x, y = points[j]
                if x == points[i][0] and y == points[i][1]:
                    same += 1
                    continue
                if points[i][0] == points[j][0]:
                    lines['0'] += 1
                    continue
                slope = numpy.float128(points[i][1] - points[j][1]) * 1.0 / numpy.float((points[i][0] - points[j][0]))
                lines[slope] = lines.get(slope, 1) + 1
                
            res = max(res, max(lines.values()) + same)
                
        return res
