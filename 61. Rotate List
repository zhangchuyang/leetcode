# Given a linked list, rotate the list to the right by k places, where k is non-negative.

# Example 1:

# Input: 1->2->3->4->5->NULL, k = 2
# Output: 4->5->1->2->3->NULL
# Explanation:
# rotate 1 steps to the right: 5->1->2->3->4->NULL
# rotate 2 steps to the right: 4->5->1->2->3->NULL
# Example 2:

# Input: 0->1->2->NULL, k = 4
# Output: 2->0->1->NULL
# Explanation:
# rotate 1 steps to the right: 2->0->1->NULL
# rotate 2 steps to the right: 1->2->0->NULL
# rotate 3 steps to the right: 0->1->2->NULL
# rotate 4 steps to the right: 2->0->1->NULL


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if not head:    return None
        
        dummy = ListNode(0)
        dummy.next = first = head

        length = 0
        while first:
            first = first.next
            length += 1        
        k %= length
        
        if k == 0:   return head
        first, second = head, head.next
        steps = length - k - 1
        while steps:
            first = first.next
            second = second.next
            steps -= 1
        
        dummy.next = second
        while second and second.next:
            second = second.next

        first.next = None
        second.next = head

        return dummy.next
            
