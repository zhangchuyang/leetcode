# There are two sorted arrays nums1 and nums2 of size m and n respectively.

# Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

# You may assume nums1 and nums2 cannot be both empty.

# Example 1:

# nums1 = [1, 3]
# nums2 = [2]

# The median is 2.0
# Example 2:

# nums1 = [1, 2]
# nums2 = [3, 4]

# The median is (2 + 3)/2 = 2.5

class Solution(object):
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        
        total = len(nums1) + len(nums2)
        
        index = total / 2 - 1 if total % 2 == 0 else total // 2
        
        
        while index:
            if not nums1:   
                nums2.pop(0)
                index -= 1
                continue
            if not nums2:
                nums1.pop(0)
                index -= 1
                continue
            nums1.pop(0) if nums1[0] < nums2[0] else nums2.pop(0)
            index -= 1
        print(nums1, nums2)
        
        if total % 2 == 0:
            if nums1 and nums2:
                if nums1[0] < nums2[0] and len(nums1) > 1:
                    return (float(nums1[0]) + min(nums1[1], nums2[0])) / 2
                elif nums1[0] > nums2[0] and len(nums2) > 1:
                    return (float(nums2[0]) + min(nums1[0], nums2[1])) / 2
                else:
                    return (float(nums1[0]) + nums2[0]) / 2
            if nums1:   return (float(nums1[0]) + nums1[1]) / 2
            else:   return (float(nums2[0]) + nums2[1]) / 2
        else:
            if nums1 and nums2:
                return min(nums1[0], nums2[0])
            if nums1:   return nums1[0]
            else:   return nums2[0]
