# Given a sorted array consisting of only integers where every element appears twice except for one element which appears once. Find this single element that appears only once.

# Example 1:

# Input: [1,1,2,3,3,4,4,8,8]
# Output: 2
# Example 2:

# Input: [3,3,7,7,10,11,11]
# Output: 10
# Example
# Your solution should run in O(log n) time and O(1) space.

class Solution:
    """
    @param nums: a list of integers
    @return: return a integer
    """
    def singleNonDuplicate(self, nums):
        # write your code here


        left, right = 0, len(nums) - 1
        while left + 1 < right:
            mid = left + (right - left) // 2
            
            if mid % 2 == 0:
                if mid + 1 < len(nums) and nums[mid] != nums[mid + 1]:
                    right = mid
                else:
                    left = mid
            else:
                if mid - 1 >= 0 and nums[mid] != nums[mid - 1]:
                    right = mid
                else:
                    left = mid
        
        if left % 2 == 0:
            return nums[left] if left + 1 < len(nums) and nums[left] != nums[right] else nums[right]
        else:
            return nums[left] if left - 1 >= 0 and nums[left - 1] != nums[left] else nums[right]
