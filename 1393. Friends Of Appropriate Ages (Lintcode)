# Some people will make friend requests. The list of their ages is given and ages[i] is the age of the ith person.

# Person A will NOT friend request person B (B != A) if any of the following conditions are true:

# age[B] <= 0.5 * age[A] + 7
# age[B] > age[A]
# age[B] > 100 && age[A] < 100
# Otherwise, A will friend request B.
# Note that if A requests B, B does not necessarily request A. Also, people will not friend request themselves.

# How many total friend requests are made?

# Example
# Example 1:

# Input: [16,16]
# Output: 2
# Explanation: 2 people friend request each other.
# Example 2:

# Input: [16,17,18]
# Output: 2
# Explanation: Friend requests are made 17 -> 16, 18 -> 17.
# Example 3:

# Input: [20,30,100,110,120]
# Output: 3
# Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.
# Notice
# 1 <= ages.length <= 20000.
# 1 <= ages[i] <= 120.

class Solution:
    """
    @param ages: 
    @return: nothing
    """
    import collections
    def numFriendRequests(self, ages):
        # 
        counter = collections.Counter(ages)
        res = 0
        for a in counter:
            for b in counter:
                if self.ismatched(a, b):
                    res += counter[a] * counter[b] if a != b else counter[a] * (counter[b] - 1)
                    
        return res
        
        
    def ismatched(self, a, b):
        if b <= 0.5 * a + 7 or b > a:   return False
        if b > 100 and a < 100: return False
        
        return True
