# Numbers can be regarded as product of its factors. For example,

# 8 = 2 x 2 x 2;
#   = 2 x 4.
# Write a function that takes an integer n and return all possible combinations of its factors.

# Example
# Example1

# Input: 12
# Output: 
# [
#   [2, 6],
#   [2, 2, 3],
#   [3, 4]
# ]
# Explanation:
# 2*6 = 12
# 2*2*3 = 12
# 3*4 = 12
# Example2

# Input: 32
# Output: 
# [
#   [2, 16],
#   [2, 2, 8],
#   [2, 2, 2, 4],
#   [2, 2, 2, 2, 2],
#   [2, 4, 4],
#   [4, 8]
# ]
# Explanation:
# 2*16=32
# 2*2*8=32
# 2*2*2*4=32
# 2*2*2*2*2=32
# 2*4*4=32
# 4*8=32
# Notice
# You may assume that n is always positive.
# Factors should be greater than 1 and less than n.

class Solution:
    """
    @param n: a integer
    @return: return a 2D array
    """
    def getFactors(self, n):
        # write your code here

        self.res = []
        for i in range(2, int(n // 2)):
            if i * i > n: break
            if n % i == 0:
                self.dfs([i], int(n // i))
                
        return self.res
        
    def dfs(self, path, num):
        prev = path[-1]
        self.res.append(path + [num])
        if num == 1:
            self.res.append(path)
            return
        
        for i in range(prev, num + 1):
            if i * i > num: break
            if num % i == 0:
                self.dfs(path + [i], int(num // i))
        
