# Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

# Note:

# All numbers will be positive integers.
# The solution set must not contain duplicate combinations.
# Example 1:

# Input: k = 3, n = 7
# Output: [[1,2,4]]
# Example 2:

# Input: k = 3, n = 9
# Output: [[1,2,6], [1,3,5], [2,3,4]]


class Solution(object):
    def combinationSum3(self, k, n):
        """
        :type k: int
        :type n: int
        :rtype: List[List[int]]
        """
        res = []
        self.dfs(k, n, res, [], 1)
        return res
    
    def dfs(self, k, n, res, path, index):
        if len(path) > k:   return
        if len(path) == k and n == 0:   res.append(path)
        for i in range(index, min(n + 1, 9 + 1)):
            if n - i < 0:   continue
            self.dfs(k, n - i, res, path + [i], i + 1)
