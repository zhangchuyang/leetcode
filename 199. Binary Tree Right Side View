# Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

# Example:

# Input: [1,2,3,null,5,null,4]
# Output: [1, 3, 4]
# Explanation:

#    1            <---
#  /   \
# 2     3         <---
#  \     \
#   5     4       <---


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def rightSideView(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:    return []
        res = []
        
        stack = [(root, 1)]
        while stack:
            temp, nxt = [], []
            for node, level in stack:
                if node.left:
                    nxt.append((node.left, level + 1))
                if node.right:
                    nxt.append((node.right, level + 1))
                temp.append(node.val)
            stack = nxt
            res.append(temp[-1])
        return res
        
