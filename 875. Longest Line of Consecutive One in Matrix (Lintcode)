
# Given a 01 matrix, find the longest line of consecutive 1 in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.

# Example
# Example 1:

# Input: 
#   [[0,1,1,0],
#   [0,1,1,0],
#   [0,0,0,1]]
# Output: 3
# Explanation: (0,1) (1,2) (2,3)
# Example 2:

# Input: [[0,0],[1,1]]
# Output: 2


# DP

class Solution:
    """
    @param M: the 01 matrix
    @return: the longest line of consecutive one in the matrix
    """
    def longestLine(self, M):
        # Write your code here
        if not M:   return 0
        
        n, m = len(M), len(M[0])
        res = 0
        
        dp = [[[0] * 4 for i in range(0, m)] for j in range(0, n)]
        
        for i in range(n):
            for j in range(m):
                if M[i][j] == 0:    continue
                for k in range(4):
                    dp[i][j][k] = 1
                if i - 1 >= 0:
                    dp[i][j][0] += dp[i - 1][j][0]
                if j - 1 >= 0:
                    dp[i][j][1] += dp[i][j - 1][1]
                if i - 1 >= 0 and j - 1 >= 0:
                    dp[i][j][2] += dp[i - 1][j - 1][2]
                if i - 1 >= 0 and j + 1 < m:
                    dp[i][j][3] += dp[i - 1][j + 1][3]
                res = max(res, max(dp[i][j][0], dp[i][j][1]))
                res = max(res, max(dp[i][j][2], dp[i][j][3]))
        return res
