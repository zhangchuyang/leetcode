# Follow up for Search in Rotated Sorted Array:

# What if duplicates are allowed?

# Would this affect the run-time complexity? How and why?

# Write a function to determine if a given target is in the array.

# Example
# Example 1:

# Input:
# []
# 1
# Output:
# false
# Example 2:

# Input:
# [3,4,4,5,7,0,1,2]
# 4
# Output:
# true


# Cannot use binary search because of duplicated element.

class Solution:
    """
    @param A: an integer ratated sorted array and duplicates are allowed
    @param target: An integer
    @return: a boolean 
    """
    def search(self, A, target):
        # write your code here
        if not A:   return False
        for n in A:
            if target == n: return True
        return False
