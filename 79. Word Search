
# Given a 2D board and a word, find if the word exists in the grid.

# The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

# Example:

# board =
# [
#   ['A','B','C','E'],
#   ['S','F','C','S'],
#   ['A','D','E','E']
# ]

# Given word = "ABCCED", return true.
# Given word = "SEE", return true.
# Given word = "ABCB", return false.

class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        res = False
        if not board or not board[0]:   return False
                
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0] and self.dfs(board, i, j, word[1:], [(i, j)]):
                    return True
        return res
    
    
    def dfs(self, nums, i, j, word, path):
        if not word:    return True
        if i and nums[i - 1][j] == word[0] and (i - 1, j) not in path and self.dfs(nums, i - 1, j, word[1:], path + [(i - 1, j)]):
            return True
        if i < len(nums) - 1 and nums[i + 1][j] == word[0] and (i + 1, j) not in path and self.dfs(nums, i + 1, j, word[1:], path + [(i + 1, j)]):
            return True
        if j and nums[i][j - 1] == word[0] and (i, j - 1) not in path and self.dfs(nums, i, j - 1, word[1:], path + [(i, j - 1)]):
            return True
        if j < len(nums[0]) - 1 and nums[i][j + 1] == word[0] and (i, j + 1) not in path and self.dfs(nums, i, j + 1, word[1:], path + [(i, j + 1)]):
            return True
        
        return False
