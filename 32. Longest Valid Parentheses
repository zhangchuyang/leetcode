# Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

# Example 1:

# Input: "(()"
# Output: 2
# Explanation: The longest valid parentheses substring is "()"
# Example 2:

# Input: ")()())"
# Output: 4
# Explanation: The longest valid parentheses substring is "()()"

class Solution(object):
    def longestValidParentheses(self, s):
        """
        :type s: str
        :rtype: int
        
        用stack的方式做， append 数字进去 不是element
        """
        # stack = [0]
        # res = 0
        # for i in range(len(s)):
        #     if s[i] == ')' and len(stack) > 1:
        #         length, last = stack.pop(), stack.pop()
        #         total = last + length + 2
        #         stack.append(total)
        #         res = max(res, total)
        #     elif s[i] == '(':
        #         stack.append(0)
        #     else:
        #         stack = [0]
        # return res
    
    
        '''
        DP
        
        '''
        
        dp = [0 for _ in range(len(s))]
        res = 0
        for i in range(1, len(s)):
            if s[i] == ')':
                if s[i - 1] == '(':
                    dp[i] = dp[i - 2] + 2
                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':
                    if dp[i - 1] > 0:
                        dp[i] = dp[i - 1] + 2 + dp[i - dp[i - 1] - 2]
                    else:
                        dp[i] = 0
            res = max(res, dp[i])
            
        return res
        
