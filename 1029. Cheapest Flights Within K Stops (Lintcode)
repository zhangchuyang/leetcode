# There are n cities connected by some flights. Each flight (u, v, w) starts from city u and arrives at v with a price w.

# Given n, flights, together with starting city src and the destination dst, your task is to find the cheapest price from src to dst with at most K stops.

# If there is no such route, return -1.

# Example
# Example 1:

# Input: 
#   n = 3,
#   flights = [[0,1,100],[1,2,100],[0,2,500]],
#   src = 0, dst = 2, K = 0
# Output: 500
# Example 2:

# Input: 
#   n = 3,
#   flights = [[0,1,100],[1,2,100],[0,2,500]],
#   src = 0, dst = 2, K = 1
# Output: 200
# Notice
# The number of nodes n will be in range [1, 100], with nodes labeled from 0 to n - 1.
# The size of flights will be in range [0, n * (n - 1) / 2].
# The format of each flight will be [src, dst, price].
# The price of each flight will be in the range [1, 10000].
# K is in the range of [0, n - 1].
# There will not be any duplicated flights or self cycles.


class Solution:
    """
    @param n: a integer
    @param flights: a 2D array
    @param src: a integer
    @param dst: a integer
    @param K: a integer
    @return: return a integer
    """
    def findCheapestPrice(self, n, flights, src, dst, K):
        # write your code here
        vertex = {x: [] for x in range(n)}
        prices = {}
        for start, end, price in flights:
            prices[(start, end)] = price
            vertex[start].append(end)
            
        costs = self.bfs(n, src, dst, K, prices, vertex)

        return costs[dst] if dst in costs else -1
        
    def bfs(self, n, src, dst, K, prices, vertex):
        queue = collections.deque()
        costs = {}
        
        for i in vertex[src]:
            queue.append(i)
            costs[i] = prices[(src, i)]
            
        stop = 1
        
        while len(queue) and stop <= K:
            i = 1
            size = len(queue)
            while i <= size:
                curr_city = queue.popleft()
                for next_city in vertex[curr_city]:
                    cost = costs[curr_city] + prices[(curr_city, next_city)]
                    if next_city in costs and costs[next_city] < cost:  continue
                    queue.append(next_city)
                    costs[next_city] = cost
                i += 1
            stop += 1
        return costs
