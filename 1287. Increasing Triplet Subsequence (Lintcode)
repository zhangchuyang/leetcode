# Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

# Formally the function should:
# Return true if there exists i, j, k
# such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
# Your algorithm should run in O(n) time complexity and O(1) space complexity.

# Example
# Example1

# Input: [1, 2, 3, 4, 5]
# Output: true
# Example2

# Input: [5, 4, 3, 2, 1]
# Output: false


class Solution:
    """
    @param nums: a list of integers
    @return: return a boolean
    """
    def increasingTriplet(self, nums):
        # write your code


        if len(nums) < 3:   return False
        
        first, second = nums[0], float('inf')
        temp = float('inf')

        for num in nums:
            if second == float('inf'):
                if num < first:
                    temp_first, temp_second = num, float('inf')
                if num > first:
                    second = num
                
            else:
                if num > second:    return True
                elif num < second and num > first:  second = num
                elif num < first:
                    if num > temp:
                        first = temp
                        second = num
                        temp = float('inf')
                    else:
                        temp = num
        return False
                
            
