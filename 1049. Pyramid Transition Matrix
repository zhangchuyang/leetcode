# We are stacking blocks to form a pyramid. Each block has a color which is a one letter string, like 'Z'.

# For every block of color C we place not in the bottom row, we are placing it on top of a left block of color A and right block of color B. We are allowed to place the block there only if (A, B, C) is an allowed triple.

# We start with a bottom row of bottom, represented as a single string. We also start with a list of allowed triples allowed. Each allowed triple is represented as a string of length 3.

# Return true if we can build the pyramid all the way to the top, otherwise false.

# Example
# Example 1:
# 	Input:  bottom = "XYZ", allowed = ["XYD", "YZE", "DEA", "FFF"]
# 	Output:  true
	
# 	Explanation:
# 	We can stack the pyramid like this:
#     A
#   / \
#   D   E
#  / \ / \
# X   Y   Z

# 	This works because ('X', 'Y', 'D'), ('Y', 'Z', 'E'), and ('D', 'E', 'A') are allowed triples.

	
# Example 2:
# 	Input: bottom = "XXYX", allowed = ["XXX", "XXY", "XYX", "XYY", "YXZ"]
# 	Output:  false
	
# 	Explanation:
# 	We can't stack the pyramid to the top.
# 	Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D. 
	
# Notice
# bottom will be a string with length in range [2, 8].
# allowed will have length in range [0, 200].
# Letters in all strings will be chosen from the set {'A', 'B', 'C', 'D', 'E', 'F', 'G'}.


class Solution:
    """
    @param bottom: a string
    @param allowed: a list of strings
    @return: return a boolean
    """
    def pyramidTransition(self, bottom, allowed):
        # write your code here


        d = {}
        
        for char in allowed:
            d[(char[0], char[1])] = d.get((char[0], char[1]), []) + [char[2]]
     
        return self.dfs(bottom, d, '')
        
    def dfs(self, bottom, d, nextLevel):
        if len(bottom) == 1:
            if not nextLevel:   return True
            return self.dfs(nextLevel, d, '')
                
        for i in range(len(bottom) - 1):
            key = (bottom[i], bottom[i + 1])
            if key not in d:    return False
            for top in d[key]:
                if self.dfs(bottom[1:], d, nextLevel + top):
                    return True
        return False
                
