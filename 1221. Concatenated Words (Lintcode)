# Given a list of words (without duplicates), please write a program that returns all concatenated words in the given list of words.

# A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

# Example
# Example 1:

# Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
# Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
# Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
#  "dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
# "ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
# Example 2:

# Input: words = ["a","b","ab","abc"]
# Output: ["ab"]
# Explanation: 
# "ab" can be concatenated by "a" and "b".
# Notice
# The number of elements of the given array will not exceed 10,000
# The length sum of elements in the given array will not exceed 600,000.
# All the input string will only include lower case letters.
# The returned elements order does not matter.


class Solution:
    """
    @param words: List[str]
    @return: return List[str]
    """
    def findAllConcatenatedWordsInADict(self, words):
        # write your code here
        res = []
        words = list(set(words))
        words.sort(key=lambda x: -len(x))
        bank = set(words)
        for i, word in enumerate(words):
            bank -= {word}
            self.wordBreak(res, word, bank)
        return res
        
    def wordBreak(self, res, target, words):
        if not target:  return 
        dp = [0] * (len(target) + 1)
        dp[0] = 1
        starts = [0]
        for i in range(1, len(target) + 1):
            for start in starts:
                if target[start : i] in words and dp[start]:
                    dp[i] = 1
                    starts.append(i)
                    break
        
        if dp[-1]:        
            res.append(target)
        return
