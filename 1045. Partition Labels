# A string S of lowercase letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.

# Example
# Example 1:
# 	Input:  S = "ababcbacadefegdehijhklij"
# 	Output:  [9,7,8]
	
# 	Explanation:
# 	The partitions are "ababcbaca", "defegde", "hijhklij".
# 	A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits S into less parts.
	
# Example 2:
# 	Input: S = "abcab"
# 	Output:  [5]
	
# 	Explanation:
# 	We can not split it. 


class Solution:
    """
    @param S: a string
    @return: a list of integers representing the size of these parts
    """
    def partitionLabels(self, S):
        # Write your code here
        last = {c: i for i, c in enumerate(S)}
        
        left, right = 0, 0
        res = []
        
        for i, c in enumerate(S):
            right = max(right, last[c])
            if i == right:
                res.append(i - left + 1)
                left = i + 1
                
        return res
