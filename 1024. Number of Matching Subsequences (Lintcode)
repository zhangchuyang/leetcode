# Given string S and a dictionary of words words, find the number of words[i] that is a subsequence of S.

# Subsequence is different from substring. Subsequences may not be continuous.

# Example
# Example 1:

# Input: S = "abcde", words = ["a", "bb", "acd", "ace"]
# Output: 3
# Explanation: There are three words in words that are a subsequence of S: "a", "acd", "ace".
# Example 2:

# Input: S = "dsahjpjauf", words = ["ahjpjau","ja","ahbwzgqnuk","tnmlanowax"]
# Output: 2
# Notice
# All words in words and S will only consists of lowercase letters.
# The length of S will be in the range of [1, 50000].
# The length of words will be in the range of [1, 5000].
# The length of words[i] will be in the range of [1, 50].

class Solution:
    """
    @param S: a string
    @param words: a dictionary of words
    @return: the number of words[i] that is a subsequence of S
    """
    def numMatchingSubseq(self, S, words):
        # Write your code here
        self.idx = { 'a' : 0, 'b' : 1, 'c' : 2, 'd' : 3, 'e' : 4,
                     'f' : 5, 'g' : 6, 'h' : 7, 'i' : 8, 'j' : 9,
                     'k' : 10, 'l' : 11, 'm' : 12, 'n' : 13, 'o' : 14,
                     'p' : 15, 'q' : 16, 'r' : 17, 's' : 18, 't' : 19,
                     'u' : 20, 'v' : 21, 'w' : 22, 'x' : 23, 'y' : 24, 'z' : 25 }
                     
        pos = []
        temp = [-1] * 26
        for i in range(len(S) - 1, -1, -1):
            temp[self.idx[S[i]]] = i
            pos.append([i for i in temp])
        pos = pos[::-1]
        
        res = 0
        for word in words:
            if self.isSubseq(word, pos):    res += 1
        return res
        
    def isSubseq(self, word, pos):
        i, j = 0, 0
        while i < len(word) and j < len(pos):
            j = pos[j][self.idx[word[i]]]
            if j < 0:   return False
            i += 1
            j += 1
        return i == len(word)
