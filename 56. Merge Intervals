# Given a collection of intervals, merge all overlapping intervals.

# Example 1:

# Input: [[1,3],[2,6],[8,10],[15,18]]
# Output: [[1,6],[8,10],[15,18]]
# Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
# Example 2:

# Input: [[1,4],[4,5]]
# Output: [[1,5]]
# Explanation: Intervals [1,4] and [4,5] are considered overlapping.
# NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.


class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:
    
        if not intervals:   return []
        intervals.sort(key=lambda x: x[0])
        res = []
        curr_start, curr_end = intervals[0]
        
        for i in range(1, len(intervals)):
            start, end = intervals[i]
            if start > curr_end:
                res.append([curr_start, curr_end])
                curr_start, curr_end = start, end
            else:
                curr_end = max(curr_end, end)
                
                
        res.append([curr_start, curr_end])
        
        return res
